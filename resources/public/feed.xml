<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://dbolson.github.io' rel='self' type='application/rss+xml'/>
<title>
Rubber Duck Dialogs
</title>
<link>
http://dbolson.github.io
</link>
<description>
Talking out loud..on the internet
</description>
<lastBuildDate>
Sun, 06 Dec 2015 11:54:06 -0800
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://dbolson.github.io/posts/2014-07-17-how-to-set-up-a-service-oriented-architecture-for-development.html.html
</guid>
<link>
http://dbolson.github.io/posts/2014-07-17-how-to-set-up-a-service-oriented-architecture-for-development.html.html
</link>
<title>
How to Set up a Service Oriented Architecture for Development
</title>
<description>
&lt;p&gt;Service oriented architectures can have many benefits, but there are trade-offs as well. One immediate annoyance is setting up multiple applications to do local development. The current workflow looks like this:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: Things have been quiet around here as I've just completed my first month at &lt;a href='https://www.fundingcircle.com/us/'&gt;Funding Circle&lt;/a&gt; and haven't made the time to blog. Now that I'm settling in, let's get this blog going again.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd app1
$ RACK&amp;#95;ENV=development rackup -p 3002

# open a new tab
$ cd app2
$ RACK&amp;#95;ENV=development rackup -p 4000

# open a new tab
$ cd app3
$ RACK&amp;#95;ENV=development rackup -p 5000

# etc.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It's also convenient to label the tabs to know where to look for an application's output, so we need to name each tab as well. This is boring and error prone as it's very easy to forget to start an application that could prevent the entire system from working as expected.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;consular&amp;#95;to&amp;#95;the&amp;#95;rescue!&quot;&gt;&lt;/a&gt;Consular to the Rescue!&lt;/h2&gt;&lt;p&gt;We just recently found out about &lt;a href='https://github.com/achiu/consular'&gt;Consular&lt;/a&gt; to automate terminal tasks and turn the above headache into a one command solution.&lt;/p&gt;&lt;p&gt;Setup is simple:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ gem install consular
$ gem install consular-iterm
$ rbenv rehash # if appropriate
$ consular init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This generates &lt;code&gt;&amp;#126;/.consularc&lt;/code&gt; for customization, and &lt;code&gt;&amp;#126;/.config/consular&lt;/code&gt; for projects. If you're using &lt;a href='http://www.iterm2.com/'&gt;iTerm&lt;/a&gt;, you'll need to require the necessary core.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# &amp;#126;/.consularc
require 'consular/iterm'

# the rest of the file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now generate a project:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ consular edit soa-setup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is an example project that replaces the current workflow:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# &amp;#126;/.config/consular/soa-setup.term
tab 'app1' do
  run 'cd &amp;#126;/workspace/app1'
  run 'RACK&amp;#95;ENV=development rackup -p 3002'
end

tab 'app2' do
  run 'cd &amp;#126;/workspace/app1'
  run 'RACK&amp;#95;ENV=development rackup -p 4000'
end

tab 'app3' do
  run 'cd &amp;#126;/workspace/app3'
  run 'RACK&amp;#95;ENV=development rackup -p 5000'
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now all you need to do is run one command, &lt;code&gt;consular start soa-setup&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;some&amp;#95;tweaks&quot;&gt;&lt;/a&gt;Some tweaks&lt;/h2&gt;&lt;p&gt;It's nice to not have to do this (minimal) song and dance for each development machine, so we packaged this up into some scripts to make the process easier.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# bin/setup
echo &amp;quot;Installing Consular...&amp;quot;

bundle install
rbenv rehash
consular init

# prepend require to file
echo &amp;quot;require 'consular/iterm'\n&amp;quot; &amp;gt; tmpfile
cat &amp;#126;/.consularc &amp;gt;&amp;gt; tmpfile
cp tmpfile &amp;#126;/.consularc
rm tmpfile

# copy project&amp;#40;s&amp;#41; to home directory to use anywhere
cp lib/default.term &amp;#126;/.config/consular/

echo &amp;quot;\nRun bin/run to start all applications.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# bin/run
consular start default
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# lib/default.term
tab 'app1' do
  run 'cd &amp;#126;/workspace/app1'
  run 'RACK&amp;#95;ENV=development rackup -p 3002'
end

tab 'app2' do
  run 'cd &amp;#126;/workspace/app2'
  run 'RACK&amp;#95;ENV=development rackup -p 4000'
end

tab 'app3' do
  run 'cd &amp;#126;/workspace/app3'
  run 'RACK&amp;#95;ENV=development rackup -p 5000'
end
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# Gemfile
source 'https://rubygems.org'

gem 'consular'
gem 'consular-iterm'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, you can create a symlink to the &lt;code&gt;run&lt;/code&gt; command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ln -s &amp;#126;/path/to/bin/run &amp;#126;/launch-apps
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go forth and be lazy, I mean, &lt;a href='http://c2.com/cgi/wiki?LazinessImpatienceHubris'&gt;virtuous&lt;/a&gt;!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 17 Jul 2014 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2014-03-22-what-do-you-get-when-you-send-an-engineer-to-poland-to-give-his-first-presentation.html.html
</guid>
<link>
http://dbolson.github.io/posts/2014-03-22-what-do-you-get-when-you-send-an-engineer-to-poland-to-give-his-first-presentation.html.html
</link>
<title>
What Do You Get When You Send an Engineer to Poland to Give His First Presentation
</title>
<description>
&lt;p&gt;A version of this post can be found &lt;a href='http://engineering.sharethrough.com/blog/2014/03/21/what-do-you-get-when-you-send-an-engineer-to-poland-to-give-his-first-presentation/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There are two types of people: producers and consumers. Producers make things that consumers use. We as software developers are both – we build software using software. We also create and consume information: books, &lt;a href='http://engineering.sharethrough.com/'&gt;blog posts&lt;/a&gt;, and conference talks, to name a few.&lt;/p&gt;&lt;p&gt;I recently gave my first conference talk at [wroc_love.rb][3] in Wrocław, Poland. We've had good success with refactoring a complicated form to a form object, and we wanted to share this knowledge. There are &lt;a href='http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/'&gt;many&lt;/a&gt; &lt;a href='http://robots.thoughtbot.com/activemodel-form-objects'&gt;blog&lt;/a&gt; posts that mention form objects, but we found that they only gave an overview of what they are and didn't go into as much detail as we wanted.&lt;/p&gt;&lt;p&gt;Some of the best talks for me go into detail on a specific topic with lots of examples. Attila Domokos' &quot;&lt;a href='http://confreaks.com/videos/2431-railsconf2013-simple-and-elegant-rails-code-with-functional-style'&gt;Simple and Elegant Rails Code with Functional Style&lt;/a&gt;&quot; is one example, and I wanted to emulate that style of deep diving.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;preparation&quot;&gt;&lt;/a&gt;Preparation&lt;/h2&gt;&lt;p&gt;Two great resources were [speaking.io][7] for how to give the talk and [reveal.js][8] for the presentation. Reveal.js was super simple to set up, and it let me use Markdown for the content. These constrained me to keep the slides basic and not get caught up with all the fancy features of typical presentation software.&lt;/p&gt;&lt;p&gt;My goals were to draw the audience into why one would want to use a form object and to be (somewhat) entertaining. I framed the talk around a scenario of building a form that needs to persist to multiple database tables, and then adding a feature to it to show how quickly things get overly complex with the Rails default ways of making multiple model-backed forms. I'd then show the refactored version that used a form object and how much simpler the same new feature was to implement.&lt;/p&gt;&lt;p&gt;Of course, I had to include &lt;a href='http://upload.wikimedia.org/wikipedia/en/5/5f/Original&lt;i&gt;Doge&lt;/i&gt;meme.jpg'&gt;some silliness&lt;/a&gt; as well. Because internet.&lt;/p&gt;&lt;p&gt;I was nervous about the talk. I thought I would talk too fast, that I would forget everything, that nobody would pay attention and have any questions, that I would be a failure. There were a lot of psychological barriers, but I figured I should just keep going – preparing the code, the slides, the content. My coworkers were a big help, giving me support, feedback, and accountability. After all, I couldn't back out when everyone I work with would know about it.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;conference&quot;&gt;&lt;/a&gt;The conference&lt;/h2&gt;&lt;p&gt;[Wrocław][10] was fun. It's very pretty, has a lot of history (the &lt;a href='http://en.wikipedia.org/wiki/Wroc%C5%82aw%27s_dwarfs'&gt;dwarfs&lt;/a&gt; were a nice touch), and the food was good and plentiful. The conference took place at the &lt;a href='http://en.wikipedia.org/wiki/Wroc%C5%82aw&lt;i&gt;University&lt;/i&gt;of_Technology'&gt;university&lt;/a&gt; and was run very well.&lt;/p&gt;&lt;p&gt;There were about 100 people at the conference, mostly local developers, but I heard a few American accents. I spoke on the second day so there was time to incorporate some of the information from the initial talks into mine. We had plenty of coffee and slow wifi, just like every other conference I've attended.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Highlight&lt;/strong&gt;: Talking to Michael Feathers about &lt;a href='http://en.wikipedia.org/wiki/Pierogi'&gt;pierogi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Lowlight&lt;/strong&gt;: Jet lag. Boo.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;talk&quot;&gt;&lt;/a&gt;The talk&lt;/h2&gt;&lt;p&gt;Well, it was finally time. I plugged in my computer, set up the microphone, got introduced, and proceeded to rip through my slides at lightening speed. Nerves and tunnel vision do quite a number on ones perception of time, and as Mike Tyson says, &quot;Everybody has a plan until they get punched in the face.&quot; Good thing I had my notes as I could read from those. It was also incredibly important that I went through the talk numerous times, adding notes each time and getting more comfortable with the material. The difference between my first run-through and the last was night and day.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;it's&amp;#95;over&amp;#95;already?&quot;&gt;&lt;/a&gt;It's over already?&lt;/h2&gt;&lt;p&gt;And then I was done. There were a few questions, some definitely because I spoke too fast. After some applause, a dozen audience members came up to the podium to ask more specific questions. We ended up digging through the code of the &lt;a href='https://github.com/dbolson/form-object-presentation'&gt;sample application&lt;/a&gt;. Everyone was very nice and we had some good discussions. It felt good to know that the content resonated enough to talk to me.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;next&amp;#95;steps&quot;&gt;&lt;/a&gt;Next steps&lt;/h2&gt;&lt;p&gt;I can now say that I'm a conference presenter. It feels good, but there's a lot of room to improve. To that end, I've submitted the talk to more upcoming conferences, so hopefully you'll be able to catch the presentation.&lt;/p&gt;&lt;p&gt;The questions provided a lot of good feedback for weaknesses in the content, so I know that the next time will be a much stronger presentation. Plus I will be less nervous (but still nervous) and can present the material more slowly and effectively.&lt;/p&gt;&lt;p&gt;It was a great experience, that I recommend to everyone. We've all have hard-fought experiences that we can teach others. I've done a conference talk and so can you.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;lessons&amp;#95;learned&quot;&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;It's going to happen so just keep moving forward.&lt;/li&gt;&lt;li&gt;A support network is invaluable.&lt;/li&gt;&lt;li&gt;Talk even slower.&lt;/li&gt;&lt;li&gt;Practice, practice, practice.&lt;/li&gt;&lt;li&gt;People are nice so don't be afraid of them.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;postscript&quot;&gt;&lt;/a&gt;Postscript&lt;/h2&gt;&lt;p&gt;Here are the &lt;a href='http://www.slideshare.net/dannyolson315/objectify-your-forms'&gt;slides&lt;/a&gt; and here is the &lt;a href='https://www.youtube.com/watch?v=NENkGg-wzx8'&gt;video&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 22 Mar 2014 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2014-02-06-notes-on-markdown.html.html
</guid>
<link>
http://dbolson.github.io/posts/2014-02-06-notes-on-markdown.html.html
</link>
<title>
Notes on Markdown
</title>
<description>
&lt;p&gt;Here's a quick primer on my &lt;a href='https://daringfireball.net/projects/markdown/'&gt;Markdown&lt;/a&gt; workflow:&lt;/p&gt;&lt;p&gt;I like to write everything in vim (of course) and save files with the &lt;code&gt;.md&lt;/code&gt; extension. Then, in my &lt;code&gt;.vimrc&lt;/code&gt;, I have these settings:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;au BufRead,BufNewFile &amp;#42;.md set ft=markdown &amp;quot; set syntax to markdown
au BufRead,BufNewFile &amp;#42;.md setlocal spell &amp;quot; set spelling
au BufRead,BufNewFile &amp;#42;.md setlocal wrap &amp;quot; set line wrapping
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I use the &lt;a href='http://marked2app.com/'&gt;Marked app&lt;/a&gt; as a preview for the Markdown files. Add this to &lt;code&gt;.vimrc&lt;/code&gt; to open the current file in Marked with &lt;code&gt;leader m&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;m :silent !open -a Marked.app '%:p'&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works for personal documents, but it's not perfect for pasting into Gmail. For that I use [markdown-it.github.io][3]. Simply paste (or write) Markdown in the left and copy from the right. You can paste this directly into Gmail while preserving the formatting.&lt;/p&gt;&lt;p&gt;Another tool to try is &lt;a href='http://mouapp.com/'&gt;Mou&lt;/a&gt; for writing Markdown (I still prefer vim).&lt;/p&gt;&lt;p&gt;It's to the point where I write everything that's more than a few sentences in Markdown. Even if I don't convert it to rich text, plain Markdown still looks pretty good.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 06 Feb 2014 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2014-02-06-musings-on-activesupport-concern.html.html
</guid>
<link>
http://dbolson.github.io/posts/2014-02-06-musings-on-activesupport-concern.html.html
</link>
<title>
Musings on ActiveSupport::Concern
</title>
<description>
&lt;p&gt;I saw a &lt;code&gt;UserConcern&lt;/code&gt; class for dealing with accepting terms and conditions show up in our code base the other day. Concerns are a &lt;a href='http://blog.coreyhaines.com/2012/12/why-i-dont-use-activesupportconcern.html'&gt;contentious&lt;/a&gt; &lt;a href='http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns'&gt;topic&lt;/a&gt;, so there isn't necessarily a wrong answer, but I do side with Corey on this one.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Concern&lt;/code&gt; mixes in additional functionality that's available at all times. It doesn't really remove the functionality so much as move it around, and now it's in less obvious place. The object still contains all the same methods, but we don't have a single place for these methods, so we need to dig around more to find them.&lt;/p&gt;&lt;p&gt;An alternative approach would be to &lt;a href='http://robots.thoughtbot.com/evaluating-alternative-decorator-implementations-in'&gt;decorate&lt;/a&gt; the instance with the additional functionality that's only needed in its current context. So we could do something like:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class FooController
  before&amp;#95;action :enforce&amp;#95;tos

  def index
  end

  private

  def enforce&amp;#95;tos
    unless AcceptedTOSUser.new&amp;#40;current&amp;#95;user&amp;#41;.accepted&amp;#95;tos?
      redirect&amp;#95;to :terms&amp;#95;path
    end
  end
end

class AcceptedTOSUser
  def initialize&amp;#40;user&amp;#41;
    @user = user
  end

  def accepted&amp;#95;tos?
    @user.accepted&amp;#95;terms&amp;#95;of&amp;#95;service?
  end

  def accept&amp;#95;tos!
    @user.update&amp;#95;attributes!&amp;#40;accepted&amp;#95;terms&amp;#95;of&amp;#95;service&amp;#95;at: Time.current&amp;#41;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This makes sure the user has already accepted the terms and conditions before he can access the &lt;code&gt;index&lt;/code&gt; action. There is also additional functionality to do the TOS accept that would occur somewhere else. This keeps all the TOS accepting functionality in the same class (nice and DRY) and doesn't pollute the &lt;code&gt;User&lt;/code&gt; space.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 06 Feb 2014 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-11-27-refactoring-to-a-query-object.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-11-27-refactoring-to-a-query-object.html.html
</link>
<title>
Refactoring to a Query Object
</title>
<description>
&lt;p&gt;We noticed that the approval badges for a manager were off. They were calculating how many &lt;em&gt;total&lt;/em&gt; records there were instead of records for the users managed by the current manager.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# view partial
= link&amp;#95;to managers&amp;#95;approvals&amp;#95;path do
  #icon
  = display&amp;#95;badge&amp;#40;Approval.where&amp;#40;status: 'requested'&amp;#41;.count&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We were also doing too much logic in the view, so we needed to extract this. We want to minimize what we put in &lt;code&gt;ActiveRecord&lt;/code&gt; models so they only have to worry about persistence, and the query needs two objects to figure out the right data, so we put this code in a &lt;a href='http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/'&gt;query object&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# app/queries/requested&amp;#95;approvals.rb
class RequestedApprovals
  def self.requested&amp;#95;for&amp;#95;manager&amp;#40;user&amp;#41;
    new.requested&amp;#95;for&amp;#95;manager&amp;#40;user&amp;#41;
  end

  def initialize&amp;#40;relation=Approval&amp;#41;
    @relation = relation
  end

  def requested&amp;#95;for&amp;#95;manager&amp;#40;user&amp;#41;
    relation
      .where&amp;#40;'user&amp;#95;id IN &amp;#40;?&amp;#41;', user.managed&amp;#95;user&amp;#95;ids&amp;#41;
      .requested
      .by&amp;#95;name
  end

  private

  attr&amp;#95;accessor :relation
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can further refactor the &lt;code&gt;#where&lt;/code&gt; method to a scope in &lt;code&gt;approval.rb&lt;/code&gt; since there's a bit of feature envy:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# app/models/approval.rb
scope :for&amp;#95;users, -&amp;gt; &amp;#40;user&amp;#95;ids&amp;#41; { where&amp;#40;'user&amp;#95;id IN &amp;#40;?&amp;#41;', user&amp;#95;ids&amp;#41; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So now we have:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# app/queries/requested&amp;#95;approvals.rb
def requested&amp;#95;for&amp;#95;manager&amp;#40;user&amp;#41;
  relation
    .for&amp;#95;users&amp;#40;user.managed&amp;#95;user&amp;#95;ids&amp;#41;
    .requested
    .by&amp;#95;name
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a few things going on here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;requested&amp;#95;for&amp;#95;manager&lt;/code&gt; returns an &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; so we can treat it as a normal query  (eg., chain methods on it).&lt;/li&gt;&lt;li&gt;We use a class method so we don't need to use &lt;code&gt;RequestedApprovals.new.requested&amp;#95;for&amp;#95;manager&amp;#40;user&amp;#41;&lt;/code&gt;.  The class method delegates to the instance method, and we keep the instance method public so we  can test the code more easily with a stubbed dependency (if we want to go that route).&lt;/li&gt;&lt;li&gt;The &lt;code&gt;attr&amp;#95;accessor&lt;/code&gt; is private so we don't expose it but can still access the instance variable  without using &lt;code&gt;@relation&lt;/code&gt;. This keeps the code a little cleaner because we're not littering  instance variables all over the place.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now we can do this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# app/controllers/managers/approvals&amp;#95;controller.rb
@approvals = RequestedApprovals.requested&amp;#95;for&amp;#95;manager&amp;#40;current&amp;#95;user&amp;#41;

# view partial
= display&amp;#95;badge&amp;#40;RequestedApprovals.requested&amp;#95;for&amp;#95;manager&amp;#40;current&amp;#95;user&amp;#41;.count&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;testing&quot;&gt;&lt;/a&gt;Testing&lt;/h2&gt;&lt;p&gt;We tested this through the controller as an integration test. This was slow, but it ensured the proper behavior while we refactored.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;spec/controllers/managers/approvals&amp;#95;controller&amp;#95;spec.rb
describe Managers::ApprovalsController do
  let&amp;#40;:user&amp;#41; { create&amp;#40;:manager&amp;#41; }

  describe '#index' do
    let&amp;#40;:managed&amp;#41; { create&amp;#40;:user, manager: user&amp;#41; }

    let!&amp;#40;:requested&amp;#95;approval&amp;#41; { create&amp;#40;:approval, user: managed, status: 'requested'&amp;#41; }
    let!&amp;#40;:requested&amp;#95;other&amp;#95;user&amp;#95;approval&amp;#41; { create&amp;#40;:approval, :with&amp;#95;user, status: 'requested'&amp;#41; }
    let!&amp;#40;:requested&amp;#95;owned&amp;#95;by&amp;#95;manager&amp;#95;approval&amp;#41; { create&amp;#40;:approval, user: user, status: 'requested'&amp;#41; }
    let!&amp;#40;:another&amp;#95;approved&amp;#41; { create&amp;#40;:approval, user: user, status: 'approved by finance'&amp;#41; }

    before do
      sign&amp;#95;in user
    end

    it 'is successful' do
      get :index
      expect&amp;#40;response&amp;#41;.to be&amp;#95;success
    end

    it 'shows the approvals for those managed by the user' do
      get :index
      results = assigns&amp;#40;:approvals&amp;#41;
      expect&amp;#40;results&amp;#41;.to eq&amp;#40;&amp;#91;requested&amp;#95;owned&amp;#95;by&amp;#95;manager&amp;#95;approval, requested&amp;#95;approval&amp;#93;&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we've refactored our code, we can write tests for the query object and throw out our integration tests for faster, more easily understood unit tests.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/queries/requested&amp;#95;approvals&amp;#95;spec.rb
describe RequestedApprovals do
  let&amp;#40;:subject&amp;#41; { RequestedApprovals }

  describe '.requested&amp;#95;for&amp;#95;manager' do
    let!&amp;#40;:requested&amp;#95;approval&amp;#41; { create&amp;#40;:approval, user: managed, status: 'requested'&amp;#41; }
    let!&amp;#40;:requested&amp;#95;other&amp;#95;user&amp;#95;approval&amp;#41; { create&amp;#40;:approval, :with&amp;#95;user, status: 'requested'&amp;#41; }
    let!&amp;#40;:requested&amp;#95;owned&amp;#95;by&amp;#95;manager&amp;#95;approval&amp;#41; { create&amp;#40;:approval, user: user, status: 'requested'&amp;#41; }
    let!&amp;#40;:another&amp;#95;approved&amp;#41; { create&amp;#40;:approval, user: user, status: 'approved by finance'&amp;#41; }

    it 'finds approvals for the users the user manages' do
      results = subject.requested&amp;#95;for&amp;#95;manager&amp;#40;user&amp;#41;
      expect&amp;#40;results&amp;#41;.to eq&amp;#40;&amp;#91;requested&amp;#95;owned&amp;#95;by&amp;#95;manager, requested&amp;#93;&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We kept the integration tests for the query object since it's conceptually tied to the database. We could stub all the chained methods on the relation, but that's fragile and hard to test.&lt;/p&gt;&lt;p&gt;We changed the controller tests to make the query object a mock since that object was tested somewhere else and we knew it worked.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/controllers/managers/approvals&amp;#95;controller&amp;#95;spec.rb
describe Managers::ApprovalsController do
  let&amp;#40;:user&amp;#41; { create&amp;#40;:manager&amp;#41; }
  let&amp;#40;:approval&amp;#41; { double&amp;#40;:approval&amp;#41; }

  describe '#index' do
    before do
      sign&amp;#95;in user
      allow&amp;#40;RequestedApprovals&amp;#41;.to receive&amp;#40;:requested&amp;#95;for&amp;#95;manager&amp;#41;.with&amp;#40;user&amp;#41;
    end

    it 'is successful' do
      get :index
      expect&amp;#40;response&amp;#41;.to be&amp;#95;success
    end

    it 'shows the approvals for those managed by the user' do
      expect&amp;#40;RequestedApprovals&amp;#41;.to receive&amp;#40;:requested&amp;#95;for&amp;#95;manager&amp;#41;.with&amp;#40;user&amp;#41;.and&amp;#95;return&amp;#40;&amp;#91;approval&amp;#93;&amp;#41;
      get :index
      expect&amp;#40;assigns&amp;#40;:approvals&amp;#41;&amp;#41;.to eq&amp;#40;&amp;#91;approval&amp;#93;&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 27 Nov 2013 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-11-09-your-backbone-can-t-save-you-now-why-we-use-backbone-marionette.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-11-09-your-backbone-can-t-save-you-now-why-we-use-backbone-marionette.html.html
</link>
<title>
Your Backbone Can't Save You Now - Why We Use Backbone Marionette
</title>
<description>
&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href='http://en.wikipedia.org/wiki/Big&lt;i&gt;ball&lt;/i&gt;of_mud'&gt;big ball of mud&lt;/a&gt; is a well understood software anti-pattern, and we've all experienced it at some point in our careers (sometimes on the receiving end but all too often as the creator). There is never a specific event where we can look back and say, &quot;this is what caused the problems we're experiencing right now.&quot; It's cumulative, subtle, and it takes time to manifest.&lt;/p&gt;&lt;p&gt;But how does this happen? We're &lt;a href='http://en.wikipedia.org/wiki/Agile&lt;i&gt;software&lt;/i&gt;development'&gt;agile&lt;/a&gt;. We pair program for instant code reviews. We follow the &lt;a href='http://en.wikipedia.org/wiki/You&lt;i&gt;aren't&lt;/i&gt;gonna&lt;i&gt;need&lt;/i&gt;it'&gt;YAGNI&lt;/a&gt; principle and only write the functionality we need. And yet, we can often end up with code that is difficult to understand, change, and test. New features take much longer to add because we don't understand the code we're working on and any change we make breaks another part of the code base.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;situation&quot;&gt;&lt;/a&gt;The situation&lt;/h2&gt;&lt;p&gt;We have an input form to let a user create a new ad creative. It's sufficiently complicated because a creative has a lot of moving parts, some required, some optional, and the user needs to be able to edit any of those parts. There is the content of the creative, information about the targeting, and the budget information. We also want to show the user what the ad unit will look like as the user enters information. It ain't trivial.&lt;/p&gt;&lt;p&gt;We use [backbone.js][4] to organize our JavaScript. It gives us powerful ways to organize our code, but it doesn't provide everything we need in a framework. True, it's easy to shoot yourself in the foot with any code, but Backbone's lack of opinion makes it easier. The documentation says that it &quot;is an attempt to discover the minimal set of data-structuring (models and collections) and user interface (views and URLs) primitives that are generally useful when building web applications with JavaScript.&quot; Developers have the freedom to use Backbone as they wish, but it's not a fully-featured framework.&lt;/p&gt;&lt;p&gt;It turns out that we have a bit too much freedom and now we have some major concerns in our code.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;structure&quot;&gt;&lt;/a&gt;Structure&lt;/h2&gt;&lt;p&gt;Our back end code is written in Ruby on Rails. Rails has a specific file structure based on its role (eg, controllers, models, or views) and uses &quot;magic&quot; to autoload the files. This design decision makes sense for Rails, but it doesn't make sense in our situation. Take a look:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;backbone/
  helpers/
  routers/
  views/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These folders don't give us a lot of information about the domain of what we're trying to model. It does tell us what types of files we have, but this is not very helpful.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;dom&amp;#95;spaghetti&quot;&gt;&lt;/a&gt;DOM spaghetti&lt;/h2&gt;&lt;p&gt;Backbone views are the heart of an application. The documentation states, &quot;The general idea is to organize your interface into logical views, backed by models, each of which can be updated independently when the model changes, without having to redraw the page.&quot; There is some structure, but it's easy to make views junk drawers that are organized haphazardly. A critique of jQuery is that it's easy to create a lot of selectors that are difficult to organize, and Backbone.js views can easily consist of this mess instead of breaking it up into organized units.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;testing&amp;#95;is&amp;#95;hard&quot;&gt;&lt;/a&gt;Testing is hard&lt;/h2&gt;&lt;p&gt;We test our JavaScript with &lt;a href='http://jasmine.github.io/'&gt;Jasmine&lt;/a&gt;, and the setup required for some of our tests is intimidating. There are tests that recreate a large part of the DOM in fixtures, use a lot of selectors to grab various bits, and then do logic on multiple pieces at once.&lt;/p&gt;&lt;p&gt;This coupling makes changing anything very difficult since the change can affect so many different parts. Difficult tests are no fun for anyone.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;won't&amp;#95;someone&amp;#95;&lt;em&gt;do&lt;/em&gt;&amp;#95;something!&quot;&gt;&lt;/a&gt;Won't someone &lt;em&gt;do&lt;/em&gt; something!&lt;/h2&gt;&lt;p&gt;With all this, we were still putting out new features, although they were small and easily understood. We recently planned work for a much larger feature that would make our creatives much more powerful. After evaluating what this feature requires, we realized that it would be very difficult to add to the code base in its existing form. We decided we needed to give our code more structure.&lt;/p&gt;&lt;p&gt;Backbone Marionette: Our New Puppet Master&lt;/p&gt;&lt;p&gt;&lt;a href='http://lostechies.com/derickbailey/2012/06/13/why-should-i-use-backbone-marionette-instead-of-%E2%80%A6/'&gt;Derick Bailey explains his reasoning for using Marionette&lt;/a&gt;, and it's compelling. Here are his reasons and what we think of them:&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;composite&amp;#95;application&amp;#95;architecture&quot;&gt;&lt;/a&gt;Composite application architecture&lt;/h3&gt;&lt;p&gt;We get much more value out of our code when we &lt;a href='http://en.wikipedia.org/wiki/Composition&lt;i&gt;over&lt;/i&gt;inheritance'&gt;prefer composition over inheritance&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;enterprise&amp;#95;messaging&amp;#95;pattern&amp;#95;influence&quot;&gt;&lt;/a&gt;Enterprise messaging pattern influence&lt;/h3&gt;&lt;p&gt;The [pub/sub][8] pattern gives us loose coupling, letting us create multiple smaller components instead of one large, monolithic application.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;modularization&amp;#95;options&quot;&gt;&lt;/a&gt;Modularization options&lt;/h3&gt;&lt;p&gt;We don't use any existing &lt;a href='http://requirejs.org/docs/whyamd.html'&gt;module&lt;/a&gt; &lt;a href='http://wiki.commonjs.org/wiki/CommonJS'&gt;libraries&lt;/a&gt; so Marionette's module system works well for us.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;incremental&amp;#95;use&amp;#95;(no&amp;#95;all-or-nothing&amp;#95;requirement)&quot;&gt;&lt;/a&gt;Incremental use (no all-or-nothing requirement)&lt;/h3&gt;&lt;p&gt;Since we've got an existing application, it makes more sense to add or change functionality in pieces instead of all at once.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;no&amp;#95;server&amp;#95;lock-in&quot;&gt;&lt;/a&gt;No server lock-in&lt;/h3&gt;&lt;p&gt;Our backend is Rails without any plans to change it, so this isn't too relevant except that it allows us to use our preferred back-end technology.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;easily&amp;#95;change&amp;#95;the&amp;#95;defaults&quot;&gt;&lt;/a&gt;Easily change the defaults&lt;/h3&gt;&lt;p&gt;All applications seem to need more than what a framework provides by default, so making this easy makes developers happy.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;code&amp;#95;as&amp;#95;configuration&quot;&gt;&lt;/a&gt;Code as configuration&lt;/h3&gt;&lt;p&gt;This goes with the previous reason. The frameworks author's conventions probably overlap a lot with ours, but it won't be 100%.&lt;/p&gt;&lt;p&gt;We'll next discuss specific benefits we get from using Marionette.js on top of Backbone.js. Stay tuned!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 09 Nov 2013 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-09-20-ui-integration-tests-with-rspec-and-capybara.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-09-20-ui-integration-tests-with-rspec-and-capybara.html.html
</link>
<title>
UI Integration Tests with RSpec and Capybara
</title>
<description>
&lt;p&gt;Now that our form object is sufficiently complex, but mostly because sales found a bug, we decided we need to have UI tests for the happy paths for new and edit actions.&lt;/p&gt;&lt;p&gt;We did not want to use Cucumber because we [didn't see its value compared to its overhead][1], so we kept the tests to &lt;a href='https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec'&gt;RSpec features&lt;/a&gt; and Capybara. Features let us test the UI as a user would and Capybara loads a browser so we have JavaScript available.&lt;/p&gt;&lt;p&gt;Here's an example of signing in a user, navigating to the form, filling it out, and submitting it. We want the form to successfully save and redirect to another page.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/features/content&amp;#95;form&amp;#95;spec.rb

require 'capybara/rails'
require 'spec&amp;#95;helper'

feature 'User creates content' do
  scenario 'with valid parameters', :integration, js: true do
    sign&amp;#95;in

    visit '/contents/new'
    fill&amp;#95;in 'URL', with: 'http://www.youtube.com/watch?v=SfammxKoUYs'
    fill&amp;#95;in 'Title', with: 'The Ultimate Dog Shaming : Cute Dog Maymo'
    fill&amp;#95;in 'Description', with: 'The Ultimate Dog Shaming : Cute Dog Maymo'
    page.execute&amp;#95;script&amp;#40;&amp;quot;$&amp;#40;'#action'&amp;#41;.val&amp;#40;'video'&amp;#41;&amp;quot;&amp;#41; # needed until form can submit without Content#action field
    attach&amp;#95;file&amp;#40;'Thumbnail', Rails.root + 'app/assets/images/logo.png'&amp;#41;
    click&amp;#95;button 'Save &amp;amp; Submit'

    expect&amp;#40;page&amp;#41;.to have&amp;#95;text&amp;#40;'Content was successfully created.'&amp;#41;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/support/features/session&amp;#95;helpers.rb

module Features
  module SessionHelpers
    def create&amp;#95;user
      user = create&amp;#40;:user&amp;#41;
    end

    def sign&amp;#95;in&amp;#95;with&amp;#40;email, password&amp;#41;
      visit '/users/sign&amp;#95;in'
      fill&amp;#95;in 'Email', with: email
      fill&amp;#95;in 'Password', with: password
      click&amp;#95;button 'Sign In'
    end

    def sign&amp;#95;in
      sign&amp;#95;in&amp;#95;with&amp;#40;user.email, user.password&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/spec&amp;#95;helper.rb

config.use&amp;#95;transactional&amp;#95;fixtures = false

RSpec.configure do |config|
  config.include Features::SessionHelpers, type: :feature
end
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec/support/database&amp;#95;cleaner.rb

RSpec.configure do |config|
  config.before&amp;#40;:suite&amp;#41; do
    DatabaseCleaner.clean&amp;#95;with&amp;#40;:truncation&amp;#41;
  end

  config.before&amp;#40;:each&amp;#41; do
    DatabaseCleaner.strategy = :transaction
  end

  config.before&amp;#40;:each, js: true&amp;#41; do
    DatabaseCleaner.strategy = :truncation
  end

  config.before&amp;#40;:each&amp;#41; do
    DatabaseCleaner.start
  end

  config.after&amp;#40;:each&amp;#41; do
    DatabaseCleaner.clean
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;Notes&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;We set &lt;code&gt;js: true&lt;/code&gt; to load Capybara since we need to execute JavaScript in the test (more on that  below). This was what loads the browser and slowed down tests, so don't use it unless you need  it.&lt;/li&gt;&lt;li&gt;We then used the helper method &lt;code&gt;sign&amp;#95;in&lt;/code&gt; to set up the user and sign the user in. We had a few  helpers that let us compose the setup we needed for each test, and we can build on them to make  our tests more readable and maintainable.&lt;/li&gt;&lt;li&gt;While filling out the form, we needed to execute JavaScript to fill in a hidden field.&lt;/li&gt;&lt;li&gt;After submitting, we expected the page to redirect and flash a success message.&lt;/li&gt;&lt;li&gt;We also needed to change RSpec to not use transactional fixtures by default. More about that  &lt;a href='http://devblog.avdi.org/2012/08/31/configuring-database_cleaner-with-rails-rspec-capybara-and-selenium/'&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;results&quot;&gt;&lt;/a&gt;Results&lt;/h2&gt;&lt;p&gt;We now know if the form breaks for a normal new or update action. We can and probably will add to these tests and we discover bugs and add new features, but we now have the plumbing in place to do so.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 20 Sep 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-09-10-the-right-time-for-structure-retrofitting-backbone-js-to-a-jquery-application.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-09-10-the-right-time-for-structure-retrofitting-backbone-js-to-a-jquery-application.html.html
</link>
<title>
The Right Time For Structure - Retrofitting Backbone.js to a jQuery Application
</title>
<description>
&lt;p&gt;It started innocently enough. We had a story to make a few UI changes to a small JavaScript app. There would be no functionality changes, so it was going to be an easy morning. Maybe even an early lunch? When we fired up Vim we saw that lunch was going to be a bit later than expected and that we were having...&lt;a href='http://dundundun.net/'&gt;spaghetti&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Let's break it down, starting with the symptoms:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;0 lines in the repository's README&lt;/li&gt;&lt;li&gt;1 JavaScript file&lt;/li&gt;&lt;li&gt;16 global functions&lt;/li&gt;&lt;li&gt;15 tests&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This application was created using a &quot;wouldn't it be cool if...&quot; design process. Since this would be a one-off application that would only get a little internal use, if any at all beyond the initial excitement, it made sense to get something out, quick and dirty, and move on to more valuable work. Given the wholly experimental nature (read: risky), this seemed reasonable.&lt;/p&gt;&lt;p&gt;It turns out that we created a popular tool and it wasn't going away anytime soon. And now we had a dilemma: Do we make the quick code change and worry about &lt;a href='http://en.wikipedia.org/wiki/Technical_debt'&gt;maintainability later&lt;/a&gt;, or do we &lt;a href='http://programmer.97things.oreilly.com/wiki/index.php/The&lt;i&gt;Boy&lt;/i&gt;Scout_Rule'&gt;clean up the code now&lt;/a&gt;, spending more time than anyone planned for this feature?&lt;/p&gt;&lt;p&gt;Would you keep reading this post if we wrote the feature, leaving a trail of shattered dreams behind us?&lt;/p&gt;&lt;p&gt;We use [backbone.js][4] for most of our JavaScript applications, so it was the logical choice to organize this application. It turned out that the tests were not very helpful since they were so coupled to the implementation of the global functions, so out they went. One even questions the utility of testing during raw experimentation (is testing code you're likely to shortly toss be considered a form of &lt;a href='https://en.wikipedia.org/wiki/Toyota&lt;i&gt;Production&lt;/i&gt;System'&gt;waste&lt;/a&gt; in the Lean sense)?&lt;/p&gt;&lt;p&gt;We also decided not to practice TDD since we were essentially backfilling tests and it's [not really TDD anymore][6].&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;let&amp;#95;the&amp;#95;retrofitting&amp;#95;begin&quot;&gt;&lt;/a&gt;Let the Retrofitting Begin&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Find the next function that's called&lt;/li&gt;&lt;li&gt;Move it to the appropriate backbone view or model without changing the internals of the  function&lt;/li&gt;&lt;li&gt;Manually test the application in the browser&lt;/li&gt;&lt;li&gt;Clean up the code we just moved (extracting functions, moving DOM selectors, event handlers,  and callbacks)&lt;/li&gt;&lt;li&gt;Manually test the application in the browser again&lt;/li&gt;&lt;li&gt;Repeat the above steps until there are no more global functions&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We made slow and steady progress using the above process. If a change broke existing functionality, we'd revert the change and make another attempt. Using small iterations and only changing one thing at a time, we made progress and soon ended up with a much cleaner codebase.&lt;/p&gt;&lt;p&gt;Now our code is in a much better place for adding functionality. Before it would have been too difficult to add tests because they would be so brittle, but now our code is much easier to test since it's properly set up with appropriate models and views.&lt;/p&gt;&lt;p&gt;As a bonus, working through each function revealed a lot of dead code that we were able to get rid of. There are few things better than deleting code.&lt;/p&gt;&lt;p&gt;As evidence of our total victory, &lt;code&gt;application.js&lt;/code&gt; is now this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$&amp;#40;function&amp;#40;&amp;#41; {
  App.init&amp;#40;&amp;#41;;
}&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;take-aways&quot;&gt;&lt;/a&gt;Take-aways&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;We must always be professionals&lt;/strong&gt;: Assume any code you're paid to write is going to get used.  As a professional and a craftsman, we strive to create value with our work. We must use the best  tools for the job and write software to the best of our abilities.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Speed at the cost of maintainability isn't true speed&lt;/strong&gt;: Working so quickly created a lot of  technical debt that we eventually had to pay back. When we did, our initial development time  slowed to a crawl. A one hour change turned into four days of work.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Write code for the benefit of the next person&lt;/strong&gt;: Our code should always be written so it's  easy to change since we're always getting new feature requests. Someone will have to write these  new features, and that someone needs to be able to understand the code quickly or spend valuable  time getting up to speed. That person could easily be the same person who wrote the code (we've  all experienced running git blame and seeing a familiar name listed). Remove code that's no  longer used, document the code properly, and use proper naming.&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 10 Sep 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-08-18-greater-test-control-with-rspec-s-tag-filters.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-08-18-greater-test-control-with-rspec-s-tag-filters.html.html
</link>
<title>
Greater Test Control with RSpec's Tag Filters
</title>
<description>
&lt;p&gt;Here's my post on the &lt;a href='http://engineering.sharethrough.com/blog/2013/08/10/greater-test-control-with-rspecs-tag-filters/'&gt;Sharethrough engineering blog&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 18 Aug 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-07-15-structuring-your-fast-tests-in-rspec.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-07-15-structuring-your-fast-tests-in-rspec.html.html
</link>
<title>
Structuring your fast tests in RSpec
</title>
<description>
&lt;p&gt;Not to be too hyperbolic, but &lt;code&gt;spec&amp;#95;fast&lt;/code&gt; directory &lt;em&gt;will&lt;/em&gt; increase the quality of all our lives in addition to making our code better. You see, we don't have to load Rails for all our test files. In fact, it's a dependency that we should try to stay away from as much as possible.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/spec&amp;#95;fast
  /contexts
  /decorators
  /models
  /lib
  /services
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sure, if we need to touch the database or we're testing the integration of multiple classes that access the framework, we need it. But we don't need it for so many other things. What other things you ask? How about most other things.&lt;/p&gt;&lt;p&gt;For example, we use &lt;a href='https://github.com/drapergem/draper'&gt;Draper&lt;/a&gt; to decorate our objects with presentational data. Do we need Rails to test these? Nope. You can see it in action below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# spec&amp;#95;fast/decorators/user&amp;#95;decorator.rb
require 'draper'

require&amp;#95;relative '../fast&amp;#95;spec&amp;#95;helper'
require&amp;#95;relative '../../app/decorators/user&amp;#95;decorator'

describe UserDecorator do
  let&amp;#40;:decorator&amp;#41; { UserDecorator }

  let&amp;#40;:user&amp;#41; { stub&amp;#40;:user, my&amp;#95;method: 'my method'&amp;#41; }

  describe 'delegation' do
    it 'delegates all methods' do
      expect&amp;#40;decorator.decorate&amp;#40;user&amp;#41;.my&amp;#95;method&amp;#41;.to eq&amp;#40;'my method'&amp;#41;
    end
  end

  describe '#special&amp;#95;url' do
    it 'sets the URL to the special URL' do
      expect&amp;#40;decorator.decorate&amp;#40;user&amp;#41;.special&amp;#95;url&amp;#41;.to eq&amp;#40;'you/are/special'&amp;#41;
    end
  end
end

# app/decorators/user&amp;#95;decorator.rbo
class UserDecorator &amp;lt; Draper::Decorator
  delegate&amp;#95;all

  def special&amp;#95;url
    'you/are/special'
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll notice a few things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;/spec&amp;#95;fast&lt;/code&gt; directory is set up just like the &lt;code&gt;spec&lt;/code&gt; directory where the folder structure  mimics the structure in the application.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;fast&amp;#95;spec&amp;#95;helper&lt;/code&gt; contains everything that all the fast tests need.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;/support&lt;/code&gt; directory functions just like the &lt;code&gt;spec/support&lt;/code&gt; directory.&lt;/li&gt;&lt;li&gt;We use &lt;code&gt;require&amp;#95;relative&lt;/code&gt; for each file we need to load, and we need to load all the files  manually in the tests.&lt;/li&gt;&lt;li&gt;The secret sauce is that there is no &lt;code&gt;require 'spec&amp;#95;helper'&lt;/code&gt; in any of the tests, so there is no  Rails! &lt;a href='http://gal.darkervision.com/wp-content/uploads/2008/11/calvin-naked-resize.jpg'&gt;Freedom&lt;/a&gt;!&lt;/li&gt;&lt;li&gt;Feel free to add to this directory as often as possible. In fact, you should probably default  your tests here. Why? It reduces coupling with the framework and (should) lead to better, ie,  &lt;a href='http://en.wikipedia.org/wiki/SOLID&lt;i&gt;(object-oriented&lt;/i&gt;design'&gt;SOLID&lt;/a&gt;) classes.&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 15 Jul 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-06-24-working-with-sass-and-web-fonts.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-06-24-working-with-sass-and-web-fonts.html.html
</link>
<title>
Working with Sass and web fonts
</title>
<description>
&lt;p&gt;We found a few issues with web fonts and the Bootstrap sprites with the above solution. It turns out we need to explicitly include the sprites:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@import &amp;quot;twitter/bootstrap/bootstrap&amp;quot;; # unchanged
@import &amp;quot;twitter/bootstrap/sprites&amp;quot;; # added
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As for the web fonts, we were importing from Google like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@import url&amp;#40;http://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This file looked like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scss&quot;&gt;@font-face {
  font-family: 'Open Sans';
  font-style: normal;
  font-weight: 400;
  src: local&amp;#40;'Open Sans'&amp;#41;, local&amp;#40;'OpenSans'&amp;#41;, url&amp;#40;http://themes.googleusercontent.com/static/fonts/opensans/v6/cJZKeOuBrn4kERxqtaUH3bO3LdcAZYWl9Si6vvxL-qU.woff&amp;#41; format&amp;#40;'woff'&amp;#41;;
}

@font-face {
  font-family: 'Open Sans';
  font-style: normal;
  font-weight: 700;
  src: local&amp;#40;'Open Sans Bold'&amp;#41;, local&amp;#40;'OpenSans-Bold'&amp;#41;, url&amp;#40;http://themes.googleusercontent.com/static/fonts/opensans/v6/k3k702ZOKiLJc3WVjuplzKRDOzjiPcYnFooOUGCOsRk.woff&amp;#41; format&amp;#40;'woff'&amp;#41;;
}
@font-face {
  font-family: 'Open Sans';
  font-style: italic;
  font-weight: 400;
  src: local&amp;#40;'Open Sans Italic'&amp;#41;, local&amp;#40;'OpenSans-Italic'&amp;#41;, url&amp;#40;http://themes.googleusercontent.com/static/fonts/opensans/v6/xjAJXh38I15wypJXxuGMBrrIa-7acMAeDBVuclsi6Gc.woff&amp;#41; format&amp;#40;'woff'&amp;#41;;
}
@font-face {
  font-family: 'Open Sans';
  font-style: italic;
  font-weight: 700;
  src: local&amp;#40;'Open Sans Bold Italic'&amp;#41;, local&amp;#40;'OpenSans-BoldItalic'&amp;#41;, url&amp;#40;http://themes.googleusercontent.com/static/fonts/opensans/v6/PRmiXeptR36kaC0GEAetxhbnBKKEOwRKgsHDreGcocg.woff&amp;#41; format&amp;#40;'woff'&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which stopped working once we precompiled the assets. By adding&lt;/p&gt;&lt;pre&gt;&lt;code&gt;src: font-url&amp;#40;'OpenSans-Regular.ttf'&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for each @font-face declaration, it found the fonts and everything worked.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 24 Jun 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-06-17-putting-sass-files-in-a-global-namespace.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-06-17-putting-sass-files-in-a-global-namespace.html.html
</link>
<title>
Putting Sass files in a global namespace
</title>
<description>
&lt;p&gt;Rails makes it easy to package our CSS files using the asset pipeline – just put all the &lt;code&gt;.scss&lt;/code&gt; files in the &lt;code&gt;application.css&lt;/code&gt; manifest file or set &lt;code&gt;require&amp;#95;tree .&lt;/code&gt; to automatically pull in all the appropriate files.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;if&amp;#95;only&amp;#95;it&amp;#95;were&amp;#95;that&amp;#95;easy...&quot;&gt;&lt;/a&gt;If only it were that easy...&lt;/h2&gt;&lt;p&gt;Using the asset pipeline keeps each &lt;code&gt;.scss&lt;/code&gt; file in its own namespace, so you will need to import any files that have variables we want to use in the current file.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;scss&quot;&gt;# layouts.scss
@import &amp;quot;variables&amp;quot;;

#my-selector {
  background-color: @background-color; # imported from layouts.scss
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;layouts.scss&lt;/code&gt; doesn't know about the contents of &lt;code&gt;variables.scss&lt;/code&gt;, so it can't access &lt;code&gt;@background-color&lt;/code&gt; that's set within &lt;code&gt;variables.scss&lt;/code&gt;. Now we need to import that file that's probably included in the manifest file, so we're going to have two declarations of the contents of &lt;code&gt;variables.scss&lt;/code&gt; and the dependency of importing it within any file that needs its content.&lt;/p&gt;&lt;p&gt;[twitter-bootstrap-rails][1] generates a &lt;code&gt;bootstrap&amp;#95;and&amp;#95;overrides.css.scss&lt;/code&gt; file that imports the Bootstrap files, so we can use the variables and mixins from Bootstrap in that file, but it won't work for any other files we have. It would be much nicer to organize our &lt;code&gt;.scss&lt;/code&gt; files semantically, eg.,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;forms.scss
layout.scss
header.scss
footer.scss
notification.scss
# ... etc.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each of these files will probably want to have access to Bootstrap variables and site-wide variables, but we will need to import everything we want to use.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;a&amp;#95;dryer&amp;#95;way&quot;&gt;&lt;/a&gt;A DRYer way&lt;/h2&gt;&lt;p&gt;h/t to &lt;a href='https://blog.pivotal.io/pivotal-labs/labs/structure-your-sass-files-with-import'&gt;Pivotal Labs&lt;/a&gt; for the implementation and the &lt;a href='http://guides.rubyonrails.org/asset_pipeline.html'&gt;link&lt;/a&gt; to the docs:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; If you want to use multiple Sass files, you should generally use the Sass @import rule instead of these Sprockets directives. Using Sprockets directives all Sass files exist within their own scope, making variables or mixins only available within the document they were defined in. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Here's what the results look like:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;# application.scss
// &amp;#42;= require bootstrap-datepicker

@import &amp;quot;twitter/bootstrap/bootstrap&amp;quot;;
@import &amp;quot;twitter/bootstrap/sprites&amp;quot;;

// Site files
@import &amp;quot;custom-variables&amp;quot;;
@import &amp;quot;custom-other&amp;quot;;

@import &amp;quot;forms&amp;quot;;
@import &amp;quot;header&amp;quot;;
@import &amp;quot;footer&amp;quot;;
@import &amp;quot;content&amp;quot;;
# ... etc.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A few notes about this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We renamed application.css to application.scss. This will allow us to use include a manifest and  use &lt;code&gt;.scss&lt;/code&gt; syntax.&lt;/li&gt;&lt;li&gt;We are still using the manifest for third-party CSS files. Since &lt;code&gt;bootstrap-datepicker&lt;/code&gt; comes in  through a &lt;a href='https://github.com/Nerian/bootstrap-datepicker-rails/'&gt;gem&lt;/a&gt;, we can just reference the CSS and let it do its thing automatically.&lt;/li&gt;&lt;li&gt;We could load each Bootstrap file individually if we want to reduce its footprint, but loading  the entire library is easier to illustrate here.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;results&quot;&gt;&lt;/a&gt;Results&lt;/h2&gt;&lt;p&gt;We can make our code more modular by easily reusing variables and mixins. Maybe we can even work toward more &lt;a href='http://ruby.bvision.com/blog/please-stop-embedding-bootstrap-classes-in-your-html'&gt;semantic naming&lt;/a&gt;...&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;one&amp;#95;caveat&quot;&gt;&lt;/a&gt;One caveat&lt;/h2&gt;&lt;p&gt;We had to remove the &lt;code&gt;spec/javascripts/spec.css&lt;/code&gt; file that loaded the manifest file since that is now &lt;code&gt;.scss&lt;/code&gt; and not &lt;code&gt;.css&lt;/code&gt;. This upset &lt;a href='http://jasmine.github.io/'&gt;Jasmine&lt;/a&gt;, and we don't like it when Jasmine is upset.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 17 Jun 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-06-01-factorygirl-fun-with-associations-with-associations.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-06-01-factorygirl-fun-with-associations-with-associations.html.html
</link>
<title>
FactoryGirl fun with associations with associations
</title>
<description>
&lt;p&gt;Ah, &lt;a href='https://github.com/thoughtbot/factory&lt;i&gt;girl/blob/master/GETTING&lt;/i&gt;STARTED.md'&gt;factories&lt;/a&gt;. Such a powerful feature that's so easy to abuse and make our tests slow and unhappy. But they're just so convenient, if we can only manage to keep them doing exactly what we want and not create extra database records.&lt;/p&gt;&lt;p&gt;The main problem comes from associations because each one will insert a new record into the database unless it's specified at creation. Using &lt;a href='https://blog.pivotal.io/pivotal-labs/labs/how-to-use-factorygirl-effectively'&gt;composition&lt;/a&gt; helps, but there is still another problem: if we have an association that itself has an association, the original association still saves a new record in the database for its association. An example will help.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# models/widget.rb
class Widget &amp;lt; ActiveRecord::Base
  belongs&amp;#95;to :account
  belongs&amp;#95;to :doodad
end

# models/doodad.rb
class Doodad &amp;lt; ActiveRecord::Base
  belongs&amp;#95;to :account
end

# spec/factories/widgets.rb
FactoryGirl.define do
  factory :widget do
  end

  trait :with&amp;#95;doodad do
    association :doodad
  end

  trait :with&amp;#95;account do
    association :account
  end
end

# spec/factories/doodads.rb
FactoryGirl.define do
  factory :doodad do
  end

  trait :with&amp;#95;account do
    association :account
  end
end

widget = FactoryGirl.create&amp;#40;:widget, :with&amp;#95;doodad&amp;#41;
widget.account == widget.doodad.account # =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The instance of &lt;code&gt;Doodad&lt;/code&gt; has an account that's created when it's created, so &lt;code&gt;widget&lt;/code&gt;'s account and &lt;code&gt;doodad&lt;/code&gt;'s account will be different accounts. This can be a problem if it matters that both belong to the same account.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;yo&amp;#95;dawg,&amp;#95;i&amp;#95;heard&amp;#95;you&amp;#95;like&amp;#95;associations...&quot;&gt;&lt;/a&gt;Yo dawg, I heard you like associations...&lt;/h2&gt;&lt;p&gt;We can use &lt;a href='https://github.com/thoughtbot/factory&lt;i&gt;girl/blob/master/GETTING&lt;/i&gt;STARTED.md#lazy-attributes'&gt;lazy attributes&lt;/a&gt; to set the &lt;code&gt;doodad&lt;/code&gt;'s account to be the same as the &lt;code&gt;Widget&lt;/code&gt;'s.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;FactoryGirl.define do
  factory :widget do
    account
    doodad { |w| w.association&amp;#40;:doodad, account: w.account&amp;#41; }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have one account that's associated with both the &lt;code&gt;widget&lt;/code&gt; and the &lt;code&gt;doodad&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This is also nice for a model for a join table used for &lt;code&gt;has&amp;#95;many :through&lt;/code&gt; associations.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# models/assignment.rb
class Assignment &amp;lt; ActiveRecord::Base
  belongs&amp;#95;to :account
  belongs&amp;#95;to :programmer
  belongs&amp;#95;to :project
end

# models/programmer.rb
class Programmer &amp;lt; ActiveRecord::Base
  belongs&amp;#95;to :account
  has&amp;#95;many :assignments
  has&amp;#95;many :projects, through: :assignments
end

# models/project.rb
class Project &amp;lt; ActiveRecord::Base
  belongs&amp;#95;to :account
  has&amp;#95;many :assignments
  has&amp;#95;many :programmers, through: :assignments
end

# spec/factories/assignments.rb
FactoryGirl.define do
  factory :assignment do
    association :account
    programmer { |a| a.association&amp;#40;:programmer, account: a.account&amp;#41; }
    project { |a| a.association&amp;#40;:project, account: a.account&amp;#41; }
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 01 Jun 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-05-25-when-to-use-ruby-s-object-send.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-05-25-when-to-use-ruby-s-object-send.html.html
</link>
<title>
When to use Ruby's Object#send
</title>
<description>
&lt;p&gt;While refactoring a section of code to pull a few related methods into another class, that class being a nested class of the original, I bumped into a small problem. Both the original and the nested class needed access to some private methods. These methods were utility methods that summed a field of the objects in both classes.&lt;/p&gt;&lt;p&gt;What should I do with these methods?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I could have them in two spots, but that isn't DRY since they were operating on similar data  structures so should only be declared once.&lt;/li&gt;&lt;li&gt;I could move them to some sort of utility class or file, but that would be more difficult to  find and could end up as a junk drawer of methods.&lt;/li&gt;&lt;li&gt;I could make them public methods on the outer class and pass that class into the instance of the  nested class, but I do not want to make those methods part of the public API of the outer class.&lt;/li&gt;&lt;li&gt;Based on the above logic, I kept the methods private, sent an instance of the outer class into  the instance of the inner class, and used &lt;code&gt;Object#send&lt;/code&gt; to access the methods.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here is what this looked like:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Outer
  def foo
    Inner.new&amp;#40;self&amp;#41;.bar
  end

  def bar
    calculated&amp;#95;value = 'outer value'
    private&amp;#95;method&amp;#40;calculated&amp;#95;value&amp;#41;
  end

  class Inner
    def initialize&amp;#40;parent&amp;#41;
      @parent = parent
    end

    def bar
      calculated&amp;#95;value = 'inner value'
      parent.send&amp;#40;:private&amp;#95;method, calculated&amp;#95;value&amp;#41;
    end
  end

  private

  def private&amp;#95;method&amp;#40;value&amp;#41;
    puts &amp;quot;here's a value: #{value}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The inner class does not need its own &lt;code&gt;#private&amp;#95;method&lt;/code&gt; but can access the method from the outer class. Both classes keep a clean public API. Since the private methods are the most volatile, as &lt;a href='http://rubyrogues.com/087-rr-book-clubpractical-object-oriented-design-in-ruby-with-sandi-metz/'&gt;Sandi Metz&lt;/a&gt; says, &quot;the writing test of private method means that you're writing a test that tightly couples you to something that's unstable.&quot; The &lt;em&gt;simple&lt;/em&gt; private method is tested through the public API, so I feel confident that the code is tested properly.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;#send&lt;/code&gt; is a &lt;a href='http://en.wikipedia.org/wiki/Code_smell'&gt;code smell&lt;/a&gt;, but this only &quot;possibly indicates a deeper problem.&quot; Sensing the smell allows us to be aware of our decision to reconsider the code, but it does not mean the code needs to be changed.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 25 May 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-05-19-creating-a-presenter-in-rails.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-05-19-creating-a-presenter-in-rails.html.html
</link>
<title>
Creating a presenter in Rails
</title>
<description>
&lt;p&gt;There are a &lt;a href='https://github.com/drapergem/draper'&gt;lot&lt;/a&gt; of &lt;a href='https://github.com/ihoka/viewtastic'&gt;presenter&lt;/a&gt; &lt;a href='https://github.com/jamesgolick/active_presenter'&gt;pattern&lt;/a&gt; &lt;a href='https://github.com/apotonick/cells'&gt;implementations&lt;/a&gt; out there, but I wanted to roll my own because I only needed one class and it's fun.&lt;/p&gt;&lt;p&gt;It needs to have &lt;code&gt;content&amp;#95;tag&amp;#40;&amp;#41;&lt;/code&gt; and named routes available, so it looks like the following:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class FooPresenter
  include Rails.application.routes.url&amp;#95;helpers

  def initialize&amp;#40;context&amp;#41;
    @context = context
  end

  def bar&amp;#40;arg=nil&amp;#41;
    if arg
      context.content&amp;#95;tag&amp;#40;:a, 'hey there', href: foo&amp;#95;path&amp;#41;
    else
      'Nothing to see here'
    end
  end

  private

  attr&amp;#95;accessor :context
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, in the controller:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;@foo = FooPresenter.new&amp;#40;view&amp;#95;context&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And in the view:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;@foo.bar&amp;#40;'yup'&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which creates a link to &lt;code&gt;foo&amp;#95;path&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;what's&amp;#95;going&amp;#95;on?&quot;&gt;&lt;/a&gt;What's going on?&lt;/h2&gt;&lt;p&gt;We need to include &lt;code&gt;url&amp;#95;helpers&amp;#40;&amp;#41;&lt;/code&gt; to get the named routes to access &lt;code&gt;foo&amp;#95;path&amp;#40;&amp;#41;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We also need to instantiate the presenter with the [&lt;code&gt;view&amp;#95;context&lt;/code&gt;][5] from the controller, which is&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; An instance of a view class. The default view class is &lt;code&gt;ActionView::Base&lt;/code&gt; &gt; The view class must have the following methods: &lt;code&gt;View.new&amp;#91;lookup&amp;#95;context, assigns, controller&amp;#93;&lt;/code&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This gives us access to helper methods like &lt;code&gt;content&amp;#95;tag&amp;#40;&amp;#41;&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;isn't&amp;#95;this&amp;#95;still&amp;#95;overkill?&quot;&gt;&lt;/a&gt;Isn't this still overkill?&lt;/h2&gt;&lt;p&gt;Many have &lt;a href='http://blog.steveklabnik.com/posts/2011-09-09-better-ruby-presenters'&gt;discussed&lt;/a&gt; this before, so I'll just reiterate that OOP is nicer than procedural code, so there.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 19 May 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-05-15-setting-default-arguments-in-ruby-the-right-way.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-05-15-setting-default-arguments-in-ruby-the-right-way.html.html
</link>
<title>
Setting default arguments in Ruby the right way
</title>
<description>
&lt;p&gt;For setting default arguments, my regular idiom has been:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def initialize&amp;#40;options={}&amp;#41;
  @param = options&amp;#91;:param&amp;#93; || false
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Recently, Josh Susser &lt;a href='https://twitter.com/joshsusser/status/332302920752197633'&gt;tweeted&lt;/a&gt; that this is bad.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Ruby API protip: don't use ||= to set defaults in an options hash. That blocks users being able &gt; to pass false as a value. #lolrails &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Here's an example of what he's talking about:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Foo
  def initialize&amp;#40;options={}&amp;#41;
    @param = options&amp;#91;:param&amp;#93; || true
  end

  def foo
    puts &amp;quot;param: #{@param.inspect}&amp;quot;
  end
end

Foo.new&amp;#40;param: true&amp;#41;.foo  # =&amp;gt; &amp;quot;param: true&amp;quot;
Foo.new&amp;#40;param: nil&amp;#41;.foo   # =&amp;gt; &amp;quot;param: true&amp;quot;
Foo.new&amp;#40;param: false&amp;#41;.foo # =&amp;gt; &amp;quot;param: true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can't set the parameter to be nil or false since it will evaluate the line logically to be true.&lt;/p&gt;&lt;p&gt;The Fix&lt;/p&gt;&lt;p&gt;Let's rewrite the line in the initializer to use #fetch.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Foo
  def initialize&amp;#40;options={}&amp;#41;
    @param = options.fetch&amp;#40;:param, true&amp;#41;
  end

  def foo
    puts &amp;quot;param: #{@param.inspect}&amp;quot;
  end
end

Foo.new&amp;#40;param: true&amp;#41;.foo  # =&amp;gt; &amp;quot;param: true&amp;quot;
Foo.new&amp;#40;param: nil&amp;#41;.foo   # =&amp;gt; &amp;quot;param: nil&amp;quot;
Foo.new&amp;#40;param: false&amp;#41;.foo # =&amp;gt; &amp;quot;param: false&amp;quot;
Foo.new.foo # =&amp;gt; &amp;quot;param: nil&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we get the results we want for the parameter we pass in. But don't worry, we can still get the default when we don't pass in a value:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Foo.new.foo # =&amp;gt; &amp;quot;param: true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 15 May 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-05-12-rspec-message-expectations-with-dates.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-05-12-rspec-message-expectations-with-dates.html.html
</link>
<title>
RSpec message expectations with dates
</title>
<description>
&lt;p&gt;I've got a class that has a collaborator class. The collaborator takes a start date and an end date as arguments. I want to test that the original object instantiates the collaborator with the right dates.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;a&amp;#95;little&amp;#95;tricky&quot;&gt;&lt;/a&gt;A little tricky&lt;/h2&gt;&lt;p&gt;The tests fail if I were to assert that the collaborator should receive dates as its arguments.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# the test
a&amp;#95;collaborator.should&amp;#95;receive&amp;#40;:new&amp;#41;
  .with&amp;#40;'an argument',
      Time.zone.parse&amp;#40;'2000-1-11 00:00:00'&amp;#41;,
      Time.zone.parse&amp;#40;'2000-1-11 23:59:59'&amp;#41;&amp;#41;
  .and&amp;#95;return&amp;#40;a&amp;#95;collaborator&amp;#95;instance&amp;#41;

# the error
Stub :a&amp;#95;collaborator received :new with unexpected arguments
 expected: &amp;#40;&amp;quot;an argument&amp;quot;, Tue, 11 Jan 2000 00:00:00 UTC +00:00, Tue, 11 Jan 2000 23:59:59 UTC +00:00&amp;#41;
      got: &amp;#40;&amp;quot;an argument&amp;quot;, Tue, 11 Jan 2000 00:00:00 UTC +00:00, Tue, 11 Jan 2000 23:59:59 UTC +00:00&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Time comparison in Ruby is a little tricky. So what do we do?&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;an&amp;#95;unexpected&amp;#95;expectation&amp;#95;syntax&quot;&gt;&lt;/a&gt;An unexpected expectation syntax&lt;/h2&gt;&lt;p&gt;It &lt;a href='https://www.relishapp.com/rspec/rspec-mocks/docs/message-expectations'&gt;turns out&lt;/a&gt; that RSpec has another expectation syntax that will let us do some manipulation of the date arguments. Check this out:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;a&amp;#95;collaborator.should&amp;#95;receive&amp;#40;:new&amp;#41; { |an&amp;#95;argument, start&amp;#95;date, end&amp;#95;date|
  expect&amp;#40;an&amp;#95;argument&amp;#41;.to eq&amp;#40;'an argument'&amp;#41;
  expect&amp;#40;start&amp;#95;date.to&amp;#95;i&amp;#41;.to eq&amp;#40;Time.zone.parse&amp;#40;'2000-1-11 00:00:00'&amp;#41;.to&amp;#95;i&amp;#41;
  expect&amp;#40;end&amp;#95;date.to&amp;#95;i&amp;#41;.to eq&amp;#40;Time.zone.parse&amp;#40;'2000-1-11 23:59:59'&amp;#41;.to&amp;#95;i&amp;#41;
}.and&amp;#95;return&amp;#40;a&amp;#95;collaborator&amp;#95;instance&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We're able to get the seconds since the Epoch version of the dates to get an exact number to compare to each other.&lt;/p&gt;&lt;p&gt;The seconds matter, so it's good to know we can test them easily.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 12 May 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-05-05-why-did-heroku-stop-precompiling-my-assets.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-05-05-why-did-heroku-stop-precompiling-my-assets.html.html
</link>
<title>
Why did Heroku stop precompiling my assets?
</title>
<description>
&lt;p&gt;I come into work today to this error:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;ActionView::Template::Error &amp;#40;'twitter/bootstrap/bootstrap.less' wasn't found.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Odd...It works in development. What could have happened?&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;search&quot;&gt;&lt;/a&gt;The search&lt;/h2&gt;&lt;p&gt;I ran the application locally with the development environment and got the same error. Great, at least it's reproducible. Let's hit the Googles...&lt;/p&gt;&lt;p&gt;Hmm, some mentions in [twitter-bootstrap-rails][1] and some scattered &lt;a href='http://stackoverflow.com/questions/9047478/rails-app-with-twitter-bootstrap-works-in-development-but-not-in-production/9117069#9117069'&gt;StackOverflow&lt;/a&gt; questions, but nothing that works. Then I noticed Heroku was no longer precompiling the assets on deploy.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;discovery&quot;&gt;&lt;/a&gt;The discovery&lt;/h2&gt;&lt;p&gt;The &lt;a href='https://devcenter.heroku.com/articles/rails-asset-pipeline#troubleshooting'&gt;Heroku docs&lt;/a&gt; have this glorious quote:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; The most common cause of failures in assets:precompile is an app that relies on having its &gt; environment present to boot. Your app's config vars are not present in the environment during &gt; slug compilation, so you should take steps to handle the nil case for config vars (and add-on &gt; resources) in your initializers. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;A recent change added some configuration variables in &lt;code&gt;application.rb&lt;/code&gt; that referenced some environment variables.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;fix&quot;&gt;&lt;/a&gt;The fix&lt;/h2&gt;&lt;p&gt;Based on some more &lt;a href='https://devcenter.heroku.com/articles/smtp'&gt;documentation&lt;/a&gt; and &lt;a href='http://stackoverflow.com/questions/7855870/gmail-on-heroku-with-rails-3'&gt;community help&lt;/a&gt;, I moved the configuration into an initializer that is loaded after the slug compilation when it can access the environment variables.&lt;/p&gt;&lt;p&gt;Deploy. Working. #winning.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 05 May 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-04-21-a-use-for-ruby-constants.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-04-21-a-use-for-ruby-constants.html.html
</link>
<title>
A use for Ruby constants
</title>
<description>
&lt;p&gt;We know that &lt;a href='http://www.liveandcode.com/2009/11/16/adventures-in-ruby-when-constants-arent/'&gt;constants&lt;/a&gt; [aren't][2], so I've always hesitated to use them when I could use a constant method instead. This makes the value more difficult to change since I can't just reassign the method's return value. It also makes it easier to test since I can override it explicitly with a stub.&lt;/p&gt;&lt;p&gt;But now I have a use for a constant...&lt;/p&gt;&lt;p&gt;I have a default value in an &lt;code&gt;ActiveRecord&lt;/code&gt; model that I set on a value when it's nil. I don't keep this in the database since it's an arbitrary value that will probably change often, and it's easier to change that in the application layer. I would normally have this value returned from a method in the class, but I use it twice: once in a validation callback and once in a class method. I would then need to define it twice:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def self.foo&amp;#95;value
  'foo'
end

def foo&amp;#95;value
  self.class.foo&amp;#95;value
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;True, I can reuse the code and only declare the actual value once, but this isn't DRY since the &quot;logic&quot; of the value is in two spots.&lt;/p&gt;&lt;p&gt;At least for now, I'm going to use a constant to set the value once and reference it at the class level and the instance level.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 21 Apr 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-04-17-using-activesupport-timewithzone-without-rails.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-04-17-using-activesupport-timewithzone-without-rails.html.html
</link>
<title>
Using ActiveSupport::TimeWithZone without Rails
</title>
<description>
&lt;p&gt;My fast spec test suite does not load Rails (otherwise it's not so fast, right?), but I want to use the niceness of &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; to create a &lt;code&gt;DateRange&lt;/code&gt; class like so:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class DateRange
  class DateRangeError &amp;lt; StandardError; end

  def initialize&amp;#40;range&amp;#41;
    @range = range
    raise&amp;#95;if&amp;#95;not&amp;#95;utc
  end

  def start&amp;#95;date
    range.first.beginning&amp;#95;of&amp;#95;day
  end

  def end&amp;#95;date
    range.last.end&amp;#95;of&amp;#95;day
  end

  private

  attr&amp;#95;reader :range

  def raise&amp;#95;if&amp;#95;not&amp;#95;utc
    if start&amp;#95;date.zone != 'UTC' || end&amp;#95;date.zone != 'UTC'
      raise DateRangeError.new&amp;#40;'The date ranges must be in UTC.'&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The corresponding tests didn't like &lt;code&gt;Time.zone&lt;/code&gt; – they thought it was nil. Which it is.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;fix&quot;&gt;&lt;/a&gt;The fix&lt;/h2&gt;&lt;p&gt;The tests need the proper &lt;code&gt;ActiveSupport&lt;/code&gt; module loaded, and the time zone needs to be set.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'active&amp;#95;support/core&amp;#95;ext'
Time.zone = 'UTC'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the time zone is set and the tests will work as expected.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;let&amp;#40;:range&amp;#41; { daterange.new&amp;#40;10.days.ago..time.zone.now&amp;#41; }

describe '#start&amp;#95;date' do
  it 'gets the beginning of the day for the earliest date in the range' do
    expect&amp;#40;range.start&amp;#95;date.to&amp;#95;i&amp;#41;.to eq&amp;#40;Time.zone.parse&amp;#40;'1999-12-31 00:00:00'&amp;#41;.to&amp;#95;i&amp;#41;
  end

  it 'is in UTC' do
    expect&amp;#40;range.start&amp;#95;date.zone&amp;#41;.to eq&amp;#40;'UTC'&amp;#41;
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 17 Apr 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2013-04-11-mysql-rspec-won-t-clear-the-database-between-test-runs.html.html
</guid>
<link>
http://dbolson.github.io/posts/2013-04-11-mysql-rspec-won-t-clear-the-database-between-test-runs.html.html
</link>
<title>
MySQL RSpec won't clear the database between test runs
</title>
<description>
&lt;p&gt;A quick one that can save a major headache. It seems that RSpec won't clear the database of a record that is defined outside of a let statement, a begin block, or an it block.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;describe '#some&amp;#95;method' do
  record = FactoryGirl.create&amp;#40;:my&amp;#95;record&amp;#41;

  it 'does something' do
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, record will not get cleared out between test runs. It's noticeable when checking that a query only returns certain records because it could include an extra one that's unexpected.&lt;/p&gt;&lt;p&gt;The solution is to either declare the record in a let statement, a begin block, or an it block.&lt;/p&gt;&lt;p&gt;Headache gone.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 11 Apr 2013 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-08-28-mysql-installation-woes-on-mountain-lion.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-08-28-mysql-installation-woes-on-mountain-lion.html.html
</link>
<title>
MySQL installation woes on Mountain Lion
</title>
<description>
&lt;p&gt;After doing a fresh installation with Mountain Lion, I've had a hell of a time properly install MySQL. I've had to use a few sources to figure this one out, and here are the steps I needed to take.&lt;/p&gt;&lt;p&gt;I'm not 100% sure that &lt;a href='http://robots.thoughtbot.com/post/27985816073/the-hitchhikers-guide-to-riding-a-mountain-lion'&gt;these steps&lt;/a&gt; are needed, but they couldn't hurt.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo chown -R `whoami` /usr/local
brew update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some background.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;brew install mysql
sudo mysql&amp;#95;install&amp;#95;db --user=mysql --tmpdir=/tmp --basedir=/usr/local
mysql.server start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now test with&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql -uroot
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 28 Aug 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-07-07-eventual-consistency-in-ui-design.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-07-07-eventual-consistency-in-ui-design.html.html
</link>
<title>
Eventual Consistency In UI Design
</title>
<description>
&lt;p&gt;A &lt;a href='http://lostechies.com/jimmybogard/2012/06/26/eventual-consistency-cqrs-and-interaction-design/'&gt;recent article&lt;/a&gt; from Los Techies resonated with something I also did recently at work, and it's nice to see others come up with similar ideas independently. &lt;a href='http://i.mobavatar.com/what-s-on-your-mind/great-minds-think-alike.jpg'&gt;Hopefully&lt;/a&gt; that means they're good ideas.&lt;/p&gt;&lt;p&gt;&quot;Eventual consistency in interaction design&quot; presents the idea of giving the user immediate feedback for an action that is not immediate. It combines a synchronous call (a message to a user after he interacts with a page) with an asynchronous one (processing the results of that action in a background task). The benefits are obvious: the user gets immediate feedback that something happened, and he knows that, while it may not have happened right away, he's not stuck in spinner hell, waiting for some sort of response.&lt;/p&gt;&lt;p&gt;When a user does certain actions on our site, we create an activity to put it in a feed to either display or to send it off to a third party. We create the activity immediately and put it in a job queue to do whatever functionality it requires later. The job queue is fast, but it can take a minute or so before it processes the new activity.&lt;/p&gt;&lt;p&gt;That's a minute the user shouldn't need to wait for.&lt;/p&gt;&lt;p&gt;So when we schedule the job, we also save the related data, the data we're sending off to a third party site, so the user sees the results immediately. To him, his action happened in real time and he never notices the difference.&lt;/p&gt;&lt;p&gt;One obvious question is what if the user tries to do something on our site with the data that is supposedly linked to another site because he assumes they've been synchronized? Since everything that goes to the other site is done asynchronously, his other actions just get added to the job queue after the first action. If he goes to the other site, the job is generally fast enough that it will have processed the original activity (again, since most jobs run in under a minute). If it becomes a problem where users are getting to the other site too quickly, we'll be able to come up with language more akin to &quot;we're processing your request.&quot; But this current implementation provides a nice solution for now.&lt;/p&gt;&lt;p&gt;Like the article mentions, &quot;If you have users that have to wait to have the view model updated to see their results, you have built the wrong user interface.&quot; In our case, the user does not have to wait for an update, even if that update hasn't happened yet.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 07 Jul 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-06-20-squashing-bugs-with-git.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-06-20-squashing-bugs-with-git.html.html
</link>
<title>
Squashing bugs with Git
</title>
<description>
&lt;p&gt;We found a bug at work where a CSS style changed, but it wasn't immediately obvious where it had been introduced. To fix this bug, I went back through the git history and checked out one in the recent past to see if the bug had been introduced there. This only took a few tries, and then I worked back toward the present to find when the styling had been modified.&lt;/p&gt;&lt;p&gt;I found the offending commit by checking out the sass file of that particular commit:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git checkout {commit&amp;#95;number} path/to/stylesheet.sass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I've got the most recent code plus the file that fixes the problem. To see what had been changed, I did a diff on the two files: the older one without the bug and the next one with the bug:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git diff {older&amp;#95;commit} {newer&amp;#95;commit} path/to/stylesheet.sass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a lot of changes, so I looked for anything that would be obvious (margins in this case). After that, it was modifying the styling to fix the bug and done.&lt;/p&gt;&lt;p&gt;Git plays nice.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 20 Jun 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-06-10-rails-controller-tests-without-rails.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-06-10-rails-controller-tests-without-rails.html.html
</link>
<title>
Rails controller tests without Rails
</title>
<description>
&lt;p&gt;In our continued journey to faster tests, we've tried doing controller tests without loading Rails and using only what's minimally required to fully test the functionality. The idea is that not only will the tests be faster, but they will drive the controller's design to be &lt;a href='http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model'&gt;thinner&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;How did it work out? First the background.&lt;/p&gt;&lt;p&gt;We implemented a controller that received an &lt;a href='http://oauth.net/'&gt;OAuth&lt;/a&gt; callback from another site to allow their users to directly login to Crowdcast. The required code was minimal, so we tried to test minimally as well.&lt;/p&gt;&lt;p&gt;Since we're not loading Rails, we need to manually load some required libraries for the controller. We need enough to load the controller and its dependencies (in this case, a URL generator class and the controller itself) successfully.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'uri'
require 'active&amp;#95;support'
require 'fast&amp;#95;spec/spec&amp;#95;helper'
require 'lib/crowdcast/url&amp;#95;generator'
require 'app/controllers/oauth&amp;#95;controller'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also need to stub out calls to models, both &lt;code&gt;ActiveRecord&lt;/code&gt; and plain old Ruby objects the controller uses. Here is where we realize how many of these we need and use the pain of stubbing yet another class to drive the design to remove that dependency.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;stub&amp;#95;class 'UserSession'
stub&amp;#95;active&amp;#95;record&amp;#95;model 'Site'
stub&amp;#95;active&amp;#95;record&amp;#95;model 'SalesforceConnection'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some are necessary, such as those for &lt;a href='https://github.com/binarylogic/authlogic'&gt;Authlogic&lt;/a&gt; and the relevant AR classes we're calling, but we were able to move calls to others out of the controller to make the tests easier to write and the code easier to read and maintain. All the usual good stuff we get from TDD and OOP.&lt;/p&gt;&lt;p&gt;Here's an example:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;describe OauthController do
  let&amp;#40;:controller&amp;#41; { OauthController.new }

  describe &amp;quot;#callback&amp;quot; do
    let&amp;#40;:user&amp;#95;attributes&amp;#41;
    let&amp;#40;:user&amp;#41; { stub&amp;#40;&amp;quot;user&amp;quot;, :single&amp;#95;access&amp;#95;token =&amp;gt; &amp;quot;foo&amp;quot;&amp;#41; }
    let&amp;#40;:site&amp;#41; { stub&amp;#40;&amp;quot;site&amp;quot;&amp;#41; }
    let&amp;#40;:redirect&amp;#95;to&amp;#95;url&amp;#41; { &amp;quot;https://foo.example.com:8080?foo=bar&amp;amp;baz=quux&amp;quot; }
    let&amp;#40;:state&amp;#41; { CGI.escape&amp;#40;{:url =&amp;gt; redirect&amp;#95;to&amp;#95;url, :subdomain =&amp;gt; &amp;quot;foo&amp;quot; }.to&amp;#95;json&amp;#41; }

  before do
    controller.stub&amp;#40;:params&amp;#41;
    controller.stub&amp;#40;:current&amp;#95;user&amp;#41; { user }
    controller.stub&amp;#40;:session&amp;#41;
    Crowdcast::Config.stub&amp;#40;:salesforce&amp;#41;

    Salesforce::UserResolver.stub&amp;#40;:user&amp;#95;attributes&amp;#95;by&amp;#95;auth&amp;#95;code&amp;#41;.with&amp;#40;{ :id =&amp;gt; &amp;quot;bar&amp;quot; }, &amp;quot;foo&amp;quot;&amp;#41;.and&amp;#95;return&amp;#40;user&amp;#95;attributes&amp;#41;
    SalesforceConnection.stub&amp;#40;:connect&amp;#41;.and&amp;#95;return&amp;#40;user&amp;#41;
    Site.stub&amp;#40;:find&amp;#95;by&amp;#95;subdomain&amp;#41;.with&amp;#40;&amp;quot;foo&amp;quot;&amp;#41;.and&amp;#95;return&amp;#40;site&amp;#41;
  end

  it &amp;quot;creates a SalesforceConnection connection&amp;quot; do
    SalesforceConnection.should&amp;#95;receive&amp;#40;:connect&amp;#41;.once.with&amp;#40;user, user&amp;#95;attributes&amp;#41;
    controller.callback
  end

  it &amp;quot;redirects to the return&amp;#95;to path with user's single access token&amp;quot; do
    controller.should&amp;#95;receive&amp;#40;:redirect&amp;#95;to&amp;#41;.with&amp;#40;redirect&amp;#95;to&amp;#95;url + &amp;quot;&amp;amp;token=foo&amp;quot;&amp;#41;
    controller.callback
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that we need a fair amount of initial setup to get both the regular methods all controllers access and the specific ones we want to test or stub in the specific tests. It's still feels reasonable considering that we lose the Rails loading overhead and tests are incredibly fast.&lt;/p&gt;&lt;p&gt;Here is the controller:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def callback
  if params&amp;#91;:code&amp;#93;
    cc&amp;#95;user = connect&amp;#95;user&amp;#95;to&amp;#95;salesforce
    redirect&amp;#95;to Crowdcast::UrlGenerator.url&amp;#40;:url =&amp;gt; return&amp;#95;to&amp;#95;url&amp;#95;from&amp;#95;callback, :params =&amp;gt; { :token =&amp;gt; cc&amp;#95;user.single&amp;#95;access&amp;#95;token }&amp;#41;
  else
    flash&amp;#91;:error&amp;#93; = params&amp;#91;:error&amp;#95;description&amp;#93; if params&amp;#91;:error&amp;#95;description&amp;#93;
    redirect&amp;#95;to return&amp;#95;to&amp;#95;url&amp;#95;from&amp;#95;callback
  end
end

private

def connect&amp;#95;user&amp;#95;to&amp;#95;salesforce
  SalesforceConnection.connect&amp;#40;existing&amp;#95;or&amp;#95;autoregistered&amp;#95;user&amp;#41;
end

def existing&amp;#95;or&amp;#95;autoregistered&amp;#95;user
  current&amp;#95;user || Salesforce::UserAutoRegistrar.register&amp;#40;current&amp;#95;site&amp;#41;
end

def return&amp;#95;to&amp;#95;url&amp;#95;from&amp;#95;callback
  state&amp;#95;from&amp;#95;callback&amp;#91;&amp;quot;url&amp;quot;&amp;#93;
end

def state&amp;#95;from&amp;#95;callback
  JSON.parse&amp;#40;CGI.unescape&amp;#40;params&amp;#91;:state&amp;#93;&amp;#41;&amp;#41;
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now a problem.&lt;/p&gt;&lt;p&gt;We want to add some more Rails controller goodness in case there are exceptions (they're always where you &lt;a href='http://www.youtube.com/watch?v=vt0Y39eMvpI&amp;t=45s'&gt;least expect them&lt;/a&gt;). Check this out.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;rescue&amp;#95;from Salesforce::UserResolver::UnsupportedAccountTypeError, :with =&amp;gt; :account&amp;#95;error
rescue&amp;#95;from Salesforce::TokenResolver::AuthCodeExpiredError, :with =&amp;gt; :expired&amp;#95;auth&amp;#95;code

def account&amp;#95;error
  render :status =&amp;gt; :precondition&amp;#95;failed, :action =&amp;gt; &amp;quot;account&amp;#95;error&amp;quot;, :layout =&amp;gt; &amp;quot;not&amp;#95;found&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to figure out how to get &lt;code&gt;rescue&amp;#95;from&lt;/code&gt; or have more stubbing on the controller class. Before, when our controller was very lightweight, we could deal with the minimal amount of manual dependencies to get the speed increases. But at this point we decided to convert the controller to our &quot;slow specs&quot; folder, ie, our regular spec folder, since the pain of managing the external dependencies reached a threshold we weren't willing to cross.&lt;/p&gt;&lt;p&gt;How did we decide this was the time? It wasn't anything specific but the overall feel of the code getting too complicated and stub-happy; we weren't getting pain from bad design but from using a framework.&lt;/p&gt;&lt;p&gt;Conclusions&lt;/p&gt;&lt;p&gt;Testing without Rails is still new, and we're still learning what works and what doesn't. Should we automatically test functionality that's coupled to the framework within the framework? I still say no, that we can get out of the framework if we use only a minimal subset that we can maintain manually. We decided to return to loading Rails when that subset was no longer minimal. That situation did not come up for some time, and it isn't a foregone conclusion that it always will. It's a developer's decision on the tradeoffs. Plus it was a great learning experience.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 10 Jun 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-05-25-reading-the-developer-s-code.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-05-25-reading-the-developer-s-code.html.html
</link>
<title>
Reading - The Developer's Code
</title>
<description>
&lt;p&gt;I recently finished reading [The Developer's Code][1] and found some ideas that really resonate. There's a lot in the book that feels very obvious, but then I realize how long it took me to learn those lessons and how many mistakes I've made to learn them. Those thoughts make me realize that the other parts of the book, the ones that don't click as much, are probably even more valuable since I now have an opportunity to learn things without the pain of experiencing then through failure (although I'm sure I'll still get to enjoy those feelings quite often).&lt;/p&gt;&lt;p&gt;Essay 11 is titled &lt;em&gt;Stop Programming&lt;/em&gt;. Its argument is that it's not about the hours one puts into the work but the quality. “Great programming is about maximizing the time you're working at your best, not the cumulative hours you spend in front of a screen.” This is readily obvious from thinking about charging clients an hourly rate vs. a fixed rate. Does it really matter if I sit at my computer for eight hours if I can provide just as much value from two hours of work? Won't &lt;a href='http://en.wikipedia.org/wiki/Parkinson's_law'&gt;work find a way to take the entire time allotted&lt;/a&gt; unless we're ever-vigilant? The difficulty for people to realize this is that programming is abstract and value isn't guaranteed through lines of code written.&lt;/p&gt;&lt;p&gt;The next essay, &lt;em&gt;Test Your Work First Thing in the Morning&lt;/em&gt;, posits that we're mentally and physically fresher earlier in the day, so it makes the most sense to do the hard things then. By the late afternoon, &quot;our perception of what makes sense or feels right now competes with fatigue. Also, fatigue makes us miss the small details.&quot; If we haven't stopped programming to take a break or otherwise recharge, our cognitive abilities will deteriorate more than normal. Thinking as an activity &lt;a href='http://en.wikipedia.org/wiki/Decision_fatigue'&gt;is difficult&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Pair programming is wonderful, but it's intense as well. We've come to understand that we shouldn't work on the more difficult problems at the end of the day, so we always try to leave small bugs or simple features for that time. It's also motivating to start the day solving more interesting problems rather than putting then off until the motivation has waned. At that time it's better to just get something done that is low impact.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 25 May 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-05-15-getting-things-done.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-05-15-getting-things-done.html.html
</link>
<title>
Getting Things Done
</title>
<description>
&lt;p&gt;It seems that our backlog of features, bugs, and technical debt grew more than it shrunk. We would fix one bug and discover two more, or we'd clean up some poorly designed feature and find out that there are others that depend on that one. We try to do our best to design new features as best we can, but that can't always happen on a legacy code base.&lt;/p&gt;&lt;p&gt;What could we do? What did we do?&lt;/p&gt;&lt;p&gt;Those two questions were very different. We could schedule time to fix bugs and clean up technical debt in between adding new features, and it's great when management is happy with this process. You may think why we as developers expose that to the management instead of just putting it into the regular development process – that we effectively black box it from the &quot;outside&quot; non-technical people. In a start-up it's not always possible since everyone needed to know what's going on, plus it's hard to hide anything when everyone was in one room. But the positive side was that management understands the need for these chores and didn't push back.&lt;/p&gt;&lt;p&gt;But back to those two questions and their differences.&lt;/p&gt;&lt;p&gt;We could do these things, and they got done, but the bugs and technical debt were still with us in a major way, and they slowed down our entire process. Was there a solution?&lt;/p&gt;&lt;p&gt;What if we just fixed them? No discussion up front, but do it and “apologize” later.&lt;/p&gt;&lt;p&gt;We've built up a lot of UI cruft over the years – poorly structured CSS and HTML, poor &lt;a href='http://openhallway.com/'&gt;usability&lt;/a&gt;, inconsistent UI. It was always a pain point, but there were so many other things we had to do as well, so it stayed around and we just dealt with it.&lt;/p&gt;&lt;p&gt;Until one of our developers took it on himself to start cleaning it up. He didn't ask for permission and he didn't talk about it, but we came in one day to a demo and code review of a much cleaner UI. The conversation immediately was about tweaking the new changes and what else we could do to make the UI better. It wasn't “hey, why did you do this?” but was just accepted that it was there and we would now deal with it. It probably helps that it was user-facing and so immediate that everyone was able to weigh in with their opinion, that it wasn't a code cleanup that only developers would recognize.&lt;/p&gt;&lt;p&gt;It was a big win and we were all much happier about the design, but could this go too far? The developer did this on his own time, either staying late or working on it at home. I don't want to seem like a [5:01 developer][2], since, as Scott prefers, I am excited about technology and I do go home to work on personal projects and learn new things, and these extracurriculars do help me be a better developer for personal and professional reasons. But they do not necessarily immediately impact what I'm doing at work. I feel this is where we should draw a distinction and concern ourselves with doing too much work-related development and not enough personal development. It's a fine line between the two and how much to balance work and life, and there is no simple solution. We should be aware of it and realize how it can become the norm.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 15 May 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-05-10-fast-specs-and-better-design.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-05-10-fast-specs-and-better-design.html.html
</link>
<title>
Fast specs and better design
</title>
<description>
&lt;p&gt;&lt;a href='http://confreaks.com/videos/641-gogaruco2011-fast-rails-tests'&gt;Corey Haines&lt;/a&gt; first brought testing parts of Rails applications without loading Rails to my attention and excitement a few months ago, and I've been looking at how other developers do similar techniques. Having recently finished [&lt;em&gt;Objects on Rails&lt;/em&gt;][2] and working through the &lt;a href='https://www.destroyallsoftware.com/screencasts'&gt;Destroy All Software&lt;/a&gt; videos, I've been constantly looking at ways to make my Rails code better and faster to test. I believe these are related and that there is a lot of value in working to make the code easy to test and fast.&lt;/p&gt;&lt;p&gt;An example of some code I've written that doesn't rely on Rails is an &lt;a href='https://github.com/rails/rails-observers'&gt;observer&lt;/a&gt;. The observer inherits from &lt;code&gt;ActiveRecord::Observer&lt;/code&gt; and would normally need Rails loaded to exercise its full functionality with the model it's observing. But if we try to keep Rails out and only load what we need, we can drive the design of the observer.&lt;/p&gt;&lt;p&gt;Here we save an activity, which is used as a generic Facebook-style activity stream item, after someone answers a question.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class AnswerObserver &amp;lt; ActiveRecord::Observer
  def after&amp;#95;create&amp;#40;answer&amp;#41;
    Activity.question&amp;#95;answered&amp;#40;answer&amp;#41;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here's the entire spec file.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'fast&amp;#95;spec/spec&amp;#95;helper'
stub&amp;#95;class 'ActiveRecord::Observer'
require 'app/models/observers/answer&amp;#95;observer'

class Activity; end

describe AnswerObserver do
  let&amp;#40;:observer&amp;#41; { AnswerObserver.new }

  describe &amp;quot;#after&amp;#95;create&amp;quot; do
    let&amp;#40;:answer&amp;#41; { stub }

    it &amp;quot;creates an activity&amp;quot; do
      Activity.should&amp;#95;receive&amp;#40;:question&amp;#95;answered&amp;#41;.with&amp;#40;answer&amp;#41;
      observer.after&amp;#95;create&amp;#40;answer&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We do a few things here. The first is loading &lt;code&gt;fast&amp;#95;spec/spec&amp;#95;helper.rb&lt;/code&gt; instead of the regular &lt;code&gt;spec&amp;#95;helper.rb&lt;/code&gt; that loads the Rails environment. The fast spec helper requires a few utility files like &lt;code&gt;awesome&amp;#95;print&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt;, and a &lt;code&gt;module&amp;#95;stub&lt;/code&gt; file that has a convenience method stolen from Avdi Grimm:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def stub&amp;#95;module&amp;#40;full&amp;#95;name&amp;#41;
  full&amp;#95;name.to&amp;#95;s.split&amp;#40;/::/&amp;#41;.inject&amp;#40;Object&amp;#41; do |context, name|
    begin
      context.const&amp;#95;get&amp;#40;name&amp;#41;
    rescue NameError
      context.const&amp;#95;set&amp;#40;name, Module.new&amp;#41;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To quote Avdi:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; This method uses &lt;code&gt;#const&amp;#95;get&lt;/code&gt; to attempt to reference the given module. If the module is &gt; defined, or if calling &lt;code&gt;#const&amp;#95;get&lt;/code&gt; causes it to be auto-loaded, the method does nothing more. But &gt; if &lt;code&gt;#const&amp;#95;get&lt;/code&gt; fails to turn up the module, it defines an anonymous empty module to act as a &gt; placeholder. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Looking back at the spec file, we see a similar call to &lt;code&gt;stub&amp;#95;class&lt;/code&gt; which does the same thing for classes. We also include the actual file of the code we're testing.&lt;/p&gt;&lt;p&gt;We create an empty &lt;code&gt;Activity&lt;/code&gt; class, normally an &lt;code&gt;ActiveRecord&lt;/code&gt; model, since we don't care what it's doing, just that it receives messages we're going to send to it. That's all this test does, really: we check that the Activity class gets a specific message passed to it with specific parameters.&lt;/p&gt;&lt;p&gt;Testing this way drives the code to be &lt;a href='http://en.wikipedia.org/wiki/Coupling&lt;i&gt;(computer&lt;/i&gt;science)'&gt;loosely coupled&lt;/a&gt; with objects this class needs to communicate with. We could have put all the activity action in the &lt;code&gt;after&amp;#95;create&lt;/code&gt; callback and we'd be able to see what's going on, but we'd need to mock and stub a lot of interactions, or we'd have to go back to loading Rails, slowing our tests down. Plus we'd have a lot of code that has &lt;a href='http://c2.com/cgi/wiki?FeatureEnvySmell'&gt;feature envy&lt;/a&gt; and would be difficult to maintain.&lt;/p&gt;&lt;p&gt;We know the test works because changing the functionality of the callback will break the test, and doing BDD will ensure that we're writing failing tests before we add functionality that could be skipped by our mocks. Of course, this problem exists with slower, more integration-like tests, so it's not like running through the full stack is a silver bullet.&lt;/p&gt;&lt;p&gt;There is a point where there can be too much mocking and stubbing, and I'll get to that in another post. For now, being able to run an entire suite of tests in less than half a second helps keep me in &lt;a href='http://en.wikipedia.org/wiki/Flow_(psychology)'&gt;flow&lt;/a&gt; to write better software.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 10 May 2012 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-03-05-don-t-be-lazy-with-route-resources-and-allow-unused-ones.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-03-05-don-t-be-lazy-with-route-resources-and-allow-unused-ones.html.html
</link>
<title>
Don't be lazy with route resources and allow unused ones
</title>
<description>
&lt;p&gt;Refactoring controllers to make them &lt;a href='http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model'&gt;skinny&lt;/a&gt; is usually a multi-step affair. The common process is to get current functionality tested and them refactor the business logic where it needs to go, moving the tests along with them to their corresponding test files. As the code is moved (to models or service objects, etc.), we can stub out those calls in the controller. Eventually, hopefully, the controller actions will be only a few assignments and a render call. Since the effects can reach across the entire Rails architecture (the M, V, and C, if you will), I find &lt;a href='http://en.wikipedia.org/wiki/Smoke&lt;i&gt;testing#Software&lt;/i&gt;development'&gt;smoke testing&lt;/a&gt; often a necessary step in the process.&lt;/p&gt;&lt;p&gt;Which brings me to two sources of frustration: the default Rails (2.0) routes and default restful routes.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;map.connect ':controller/:action/:id.:format'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is just ripe for annoyance. Having a list of all the routes set up and not being able to find the one that I need? This guys fault. Rails has a lot of magic, but this has become a major pain because of the implicit and non-obvious nature of allowing anything one wants to sit next to a specified list. But then again, that specific list can have problems of its own too.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;map.resources :photos
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can be fantastic. One line gives us so much power and ease: 7 actions for the price of one. What's the problem? Well, when I was recently working on some &lt;a href='http://en.wikipedia.org/wiki/Technical_debt'&gt;technical debt&lt;/a&gt;, I thought I found some unused actions. But how did I know for sure? I had to do a lot of &lt;a href='http://en.wikipedia.org/wiki/Grep'&gt;grepping&lt;/a&gt; and manual testing to make sure these really weren't used. It turned out that one I thought wasn't was actually called in one specific case, so I had to back out my changes.&lt;/p&gt;&lt;p&gt;This would have been less painful if the code coverage was better, but that's sometimes the nature of old code, isn't it? If there are methods in the controller that aren't used, it's one thing to not have them declared, but what happens when there is code for an action that goes unused? I decided to be explicit about which routes to use so I didn't have to deal with the same problems later on (I can be my own worst enemy sometimes).&lt;/p&gt;&lt;p&gt;Let's lock down those resources:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;map.resources :foobars, :only =&amp;gt; &amp;#91;:index, :show, :new, :create&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we're not using &lt;code&gt;:edit&lt;/code&gt;, &lt;code&gt;:update&lt;/code&gt;, and &lt;code&gt;:destroy&lt;/code&gt;, let's not clutter things up with implications.&lt;/p&gt;&lt;p&gt;Maybe it's overkill, but tech debt can be painful to pay back, and I don't want to piss off my future self if this were to happen again.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 05 Mar 2012 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-02-12-vimprovements.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-02-12-vimprovements.html.html
</link>
<title>
Vimprovements
</title>
<description>
&lt;p&gt;After the &lt;a href='/blog/2011/12/22/can-we-have-too-many-tools/'&gt;improvements&lt;/a&gt; I made to my Vim setup, I realized I could get that setup in a repeatable state without too many problems. Here's what I did.&lt;/p&gt;&lt;p&gt;The first decision was to not use &lt;a href='https://github.com/carlhuda/janus'&gt;Janus&lt;/a&gt;. I enjoyed my time with it, but I wanted to have full control over Vim and have a reason for each new piece of functionality. I went through the &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.gvimrc&lt;/code&gt; files and the list of plugins and took only the ones I used for day-to-day development. If I have a pain point and want more functionality, I'll find a solution organically, but I didn't want to have a kitchen sink setup where I didn't know if the functionality is Vim's or Janus'.&lt;/p&gt;&lt;p&gt;Don't feel that this means I dislike Janus, as I think it's a great environment, especially for those new to Vim, but it's time to move on.&lt;/p&gt;&lt;p&gt;I then installed &lt;a href='https://github.com/tpope/vim-pathogen'&gt;pathogen&lt;/a&gt; for easy plugin management. I used submodules to install all the &lt;a href='https://github.com/dbolson/dotvim/tree/master/bundle'&gt;plugins&lt;/a&gt; I wanted so I'm able to easily update them through git. The two non-trivial installations were Command-T and javaScriptLint. I included instructions in the &lt;a href='https://github.com/dbolson/dotvim/blob/master/README'&gt;README&lt;/a&gt; for getting those installed. For the latter plugin, it's a nice thing to add the following line to your &lt;code&gt;.vimrc&lt;/code&gt; file to get rid of the rather strong highlighting color:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;let g:jslint&amp;#95;highlight&amp;#95;color=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To get the &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.gvimrc&lt;/code&gt; files in the same folder, I renamed them without the dots and created symlinks with the original names in the root directory that pointed to them. Now everything was under version control and can go on whatever machine I want.&lt;/p&gt;&lt;p&gt;You can find my setup on &lt;a href='https://github.com/dbolson/dotvim/'&gt;GitHub&lt;/a&gt;. Feel free to take what you like.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 12 Feb 2012 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2012-01-16-state-machine-transactions.html.html
</guid>
<link>
http://dbolson.github.io/posts/2012-01-16-state-machine-transactions.html.html
</link>
<title>
State Machine Transactions
</title>
<description>
&lt;p&gt;We have a model that has a &lt;a href='https://github.com/omghax/acts&amp;#95;as&amp;#95;state&amp;#95;machine'&gt;state machine&lt;/a&gt; on it to activate, close, and cancel after meeting certain conditions. When closing this model, we want to manipulate an associated model as well, and we want these in a &lt;a href='http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html'&gt;transaction&lt;/a&gt; to preserve data integrity. Unfortunately, there is logic in the associated model that doesn't like to have the original model in the new state before saving.&lt;/p&gt;&lt;p&gt;One solution is to set up the following callbacks:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;state :closed, :enter =&amp;gt; :enter&amp;#95;close, :after =&amp;gt; :after&amp;#95;close
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def enter&amp;#95;closed
  # do stuff to model
end

def after&amp;#95;close
  # do stuff to associated model
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;problem&quot;&gt;&lt;/a&gt;The problem&lt;/h2&gt;&lt;p&gt;It turns out that the callbacks are not wrapped in a transaction and that &lt;code&gt;#after&amp;#95;close&lt;/code&gt; is called after the model saves, leaving the associated model in danger of getting in a back state or failing validations.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;solution&quot;&gt;&lt;/a&gt;The solution&lt;/h2&gt;&lt;p&gt;Using &lt;a href='http://rhnh.net/2010/07/05/acts-as-state-machine-is-not-concurrent'&gt;this post&lt;/a&gt; as a guide, we ended up with this code:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class ActiveRecord::Base
  def self.transaction&amp;#95;around&amp;#95;transitions
    event&amp;#95;table.keys.each do |t|
      define&amp;#95;method&amp;#40;&amp;quot;#{t}&amp;#95;with&amp;#95;lock!&amp;quot;&amp;#41; do
        transaction do
          send&amp;#40;&amp;quot;#{t}&amp;#95;without&amp;#95;lock!&amp;quot;&amp;#41;
        end
      end
      alias&amp;#95;method&amp;#95;chain &amp;quot;#{t}!&amp;quot;, :lock
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And call that method after setting up the transitions:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;event :close do
  transitions :from =&amp;gt; :foo, :to =&amp;gt; :bar
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;other&amp;#95;transitions...&quot;&gt;&lt;/a&gt;Other transitions...&lt;/h2&gt;&lt;p&gt;Now there is a transaction around the entire state change and its callbacks, and we'll be able to sleep tonight knowing that all the saving is safe and sound, all wrapped up in a nice, warm transaction.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 16 Jan 2012 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-12-22-can-we-have-too-many-tools.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-12-22-can-we-have-too-many-tools.html.html
</link>
<title>
Can We Have Too Many Tools?
</title>
<description>
&lt;p&gt;&lt;a href='http://www.vim.org/'&gt;Vim&lt;/a&gt; is a great editor. There are &lt;a href='https://github.com/carlhuda/janus'&gt;so many plugins&lt;/a&gt; that make it even better and increase my productivity. But can there be a saturation point where it's not worth finding the next plugin to shave a keystroke off of a command? I've been trying to find the sweet spot for the right amount of tools for the job.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;bigger&amp;#95;toolbox&quot;&gt;&lt;/a&gt;Bigger toolbox&lt;/h2&gt;&lt;p&gt;Having &lt;a href='blog/2011/11/18/welcome-the-new-guys/'&gt;more developers&lt;/a&gt; to talk to and work with, I have been exposed to different methods of development. &lt;a href='http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/'&gt;Yan&lt;/a&gt; in particular, has been a tremendous Vim resource. He's made it his focus to optimize working with this editor as much as possible, and it's quite impressive. I've adopted some of his ideas, no longer content to be &quot;good enough&quot; with Vim.&lt;/p&gt;&lt;p&gt;Janus has been a tremendous help. It exposed me to &lt;a href='http://www.vim.org/scripts/script.php?script&amp;#95;id=3025'&gt;command-T&lt;/a&gt;, which is now my favorite thing ever. I no longer use a buffer explorer because it's easier to just find it with command-T than search through the buffer list. I also rarely use &lt;a href='http://www.vim.org/scripts/script.php?script&amp;#95;id=1658'&gt;NERDtree&lt;/a&gt; now, since I was using that mostly as a convenience to open project files. I'll still use it for looking in directories, but it's not open by default anymore.&lt;/p&gt;&lt;p&gt;From Yan, I've install &lt;a href='https://github.com/tjennings/git-grep-vim'&gt;git-grep&lt;/a&gt; and mapped &lt;code&gt;K&lt;/code&gt; to search for the word under the cursor, and that's been such a pleasant, and faster experience, than using vimgrep. Yan is also cleaning up a plugin for rspec integration that provides some nice wins.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;too&amp;#95;big?&quot;&gt;&lt;/a&gt;Too big?&lt;/h2&gt;&lt;p&gt;But how far do I take this path? I could continue to add plugins and map commonly used keystrokes to further increase efficiency, but when do I start to get diminishing returns? For example, I could map a letter to &lt;code&gt;:GitGrep&lt;/code&gt; and save six keystrokes, but I haven't found the need to do that yet. Usually when I'm searching for something, I'm thinking about what I want to search for while typing the command, so I'm effectively multitasking and not wasting time with all that extra typing. Sometimes slowing down can be a good thing to allow that planning. Plus each new mapping or plugin is something new to learn, and it can occasionally become overwhelming with all the new options.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;just&amp;#95;right,&amp;#95;for&amp;#95;now&quot;&gt;&lt;/a&gt;Just right, for now&lt;/h2&gt;&lt;p&gt;I'll definitely continue to improve my Vim Fu, but I'm not in a hurry to continually add to my repertoire until I've mastered what I currently have available. I've come this far on a basic setup, and Vim has been around long enough that there have been many others who have gotten by with less, so I'm not going to stress out about not optimizing every single key I type.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 22 Dec 2011 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-12-04-pair-programming-feedback.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-12-04-pair-programming-feedback.html.html
</link>
<title>
Pair Programming Feedback
</title>
<description>
&lt;p&gt;It's been a few weeks of pair programming with the &lt;a href='/blog/2011/11/18/welcome-the-new-guys/'&gt;new guys&lt;/a&gt;, and it's been so enjoyable and valuable. Here's what I've experienced.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;improved&amp;#95;toolset&quot;&gt;&lt;/a&gt;Improved toolset&lt;/h2&gt;&lt;p&gt;Since there are multiple people working on the same computers, we need a shared toolset. Some of us like &lt;a href='https://www.jetbrains.com/ruby/'&gt;RubyMine&lt;/a&gt;, while others prefer the awesomeness of vim. Since everyone prefers one of these two, we can set them both up on each machine and switch editors as needed. Yes, it would be optimal for pairing to use the exact same environment and setup like &lt;a href='http://pivotal.io/labs'&gt;Pivotal Labs&lt;/a&gt;, but you can pry vim out of my cold, dead hands (hard drive?).&lt;/p&gt;&lt;p&gt;It's easy to keep ones toolset static after getting used to that way of doing things, so getting others who have different processes allows us all to question our own and change those parts that are lacking. I've finally come around to &lt;a href='https://github.com/carlhuda/janus/'&gt;Janus&lt;/a&gt;, a suite of vim customizations and plugins, and it's been great. Command-T is almost worth it by itself. Yan also introduced me to &lt;a href='https://github.com/tjennings/git-grep-vim'&gt;git-grep&lt;/a&gt;, which has been much faster than vimgrep.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;improved&amp;#95;code&quot;&gt;&lt;/a&gt;Improved code&lt;/h2&gt;&lt;p&gt;The value of the discussion-aspect of pairing becomes immediately obvious when there's a disagreement. [Trying to argue ones position on a subject exposes how much one really understands about that subject](http://ideas.time.com/2011/11/30/the-protege-effect/). If I can't explain why we should use technique x to my pair, do I really know enough to say for sure that we should? It's a great didactic tool for all parts of the development process – pretty much anything that we would write is subject for debate, and the discussions are invaluable for coming up with the best solution.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;more&amp;#95;fun&quot;&gt;&lt;/a&gt;More fun&lt;/h2&gt;&lt;p&gt;Having more people in the office has made the place much more lively and interesting. Since we're such a small startup, any new person is going to have a major impact on the physical space of the office and the dynamic of the group (going from four to five is kind of a big deal). Our new &lt;a href='/blog/2011/10/07/our-interview-process/'&gt;interview process&lt;/a&gt; seems to have worked because it's been a pleasure working with each new team member, and everyone gets along with everyone else.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;exhaustion&quot;&gt;&lt;/a&gt;Exhaustion&lt;/h2&gt;&lt;p&gt;Pair programming is fun, but it's tiring to work so intimately and intensly with someone all day. The productivity has gone up a lot because of the focus, the breaks have become more separate (not just reading an article on the computer but getting up and moving away from the damn thing), and I'm definitely ready to stop coding by the end of the day. It's a good exhaustion, a feeling that much was accomplished and comes with a certain buzz that's different than when working by myself all day. It's a new stress, but I'll adapt to it and get even better.&lt;/p&gt;&lt;p&gt;We're in a good place, and we're ready to continue writing great software.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 04 Dec 2011 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-11-18-welcome-the-new-guys.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-11-18-welcome-the-new-guys.html.html
</link>
<title>
Welcome the New Guys
</title>
<description>
&lt;p&gt;We recently hired a trio of new developers at work, and it's been such an enjoyable experience to have them around. &lt;a href='http://www.tjames.com/'&gt;Tim&lt;/a&gt;, Clay, and &lt;a href='http://yanpritzker.com/'&gt;Yan&lt;/a&gt; (who starts soon) are all solid developers and great guys as well.&lt;/p&gt;&lt;p&gt;I've paired with Clay and Tim full-time, and I'm completely sold on the practice. The mind-share we create through immediate feedback and conversation is invaluable. Management likes it because it means the new hires are productive from the outset, as the training happens in real-time. We're learning from each other in numerous ways. For example, the default macvim/git interaction doesn't work, so I have had to use the command line for commit messages. Tim kindly informed me that I can set my bash editor to default to macvim using:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;EDITOR=&amp;quot;macvim -f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I can write my commit messages in macvim. The -f flag prevents forking when starting so git will wait until the editor closes before proceeding. A nice thing to have.&lt;/p&gt;&lt;p&gt;Here's to the new guys!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 18 Nov 2011 00:00:00 -0800
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-11-04-rails-2-3-5-bug-with-accepts_nested_attributes_for.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-11-04-rails-2-3-5-bug-with-accepts_nested_attributes_for.html.html
</link>
<title>
Rails 2.3.5 Bug With accepts_nested_attributes_for
</title>
<description>
&lt;p&gt;At work, our application has a series of questions it asks users, and an administrator can set a target of what he thinks (or wants) the answer to be.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Question &amp;lt; ActiveRecord::Base
  has&amp;#95;many :targets
  accepts&amp;#95;nested&amp;#95;attributes&amp;#95;for :targets, :allow&amp;#95;destroy =&amp;gt; true
end

class Target &amp;lt; ActiveRecord::Base
  belongs&amp;#95;to :question
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The administrator fills the form out, choosing a target or not, and Rails will save, update, or destroy it as normal. Well, almost. &lt;a href='https://github.com/rails/rails/commit/146a7505680cbb646c0b9d55dca7cc8494b36e47'&gt;Apparently&lt;/a&gt; there is a bug in Rails 2.3.5 that will save the child model twice, and we're experiencing that now.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;what&amp;#95;i&amp;#95;want&amp;#95;to&amp;#95;do&quot;&gt;&lt;/a&gt;What I want to do&lt;/h2&gt;&lt;p&gt;Upgrade to Rails 3.1, get all the new hotness and bug fixes, and not worry about this problem.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;what&amp;#95;i'm&amp;#95;going&amp;#95;to&amp;#95;do&quot;&gt;&lt;/a&gt;What I'm going to do&lt;/h2&gt;&lt;p&gt;Since we don't have the resources to upgrade Rails (yet…), we need a workaround. Here's what we came up with.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;after&amp;#95;save :ensure&amp;#95;one&amp;#95;target&amp;#95;while&amp;#95;in&amp;#95;draft

def ensure&amp;#95;one&amp;#95;target&amp;#95;while&amp;#95;in&amp;#95;draft
  if draft? &amp;amp;&amp;amp; targets.count &amp;gt; 1
    targets&amp;#91;1..-1&amp;#93;.each { |t| t.destroy }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This problem only comes up when a question has not been activated and is still in draft mode. Once it's activated, the administrator cannot change the target but only add additional ones. So while in that state, and if there are multiple targets, destroy all but the first. This needs to be in an &lt;code&gt;after&amp;#95;save&lt;/code&gt; callback because the double-save does not happen until after the question is saved. It's not elegant, but it works. I don't want to try to patch Rails and remember to deal with that later when we finally do upgrade, and the situation is isolated enough that there isn't a performance hit and it's easy to remove once it's no longer necessary. Elegant? No. But it's a bug fix for the framework, it's well documented in the code, and it works.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 04 Nov 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-10-22-rails-security-refactor-protect-those-attributes.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-10-22-rails-security-refactor-protect-those-attributes.html.html
</link>
<title>
Rails Security Refactor - Protect Those Attributes
</title>
<description>
&lt;p&gt;Rails in the enterprise is still a fairly new concept, but the same web development principles we have also exist in this new realm. One no-brainer is security, and one no-brainer part of security is protecting data from malicious user input.&lt;/p&gt;&lt;p&gt;The basic Rails ways to protect attributes on a model are &lt;code&gt;attr&amp;#95;protected&lt;/code&gt; and &lt;code&gt;attr&amp;#95;accessible&lt;/code&gt;. If neither are set, it's easy to imagine a situation where a user updates his attributes and the corresponding model has a boolean admin field on it. The user can trivially submit post data that looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;params: { &amp;quot;user&amp;quot; =&amp;gt; { :email =&amp;gt; &amp;quot;foo@bar.com&amp;quot;, :first&amp;#95;name =&amp;gt; &amp;quot;Joe&amp;quot;, :last&amp;#95;name =&amp;gt; &amp;quot;Hacker&amp;quot;, :admin =&amp;gt; &amp;quot;true&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Oops! Now Mr. Hacker is Mr. Admin!&lt;/p&gt;&lt;p&gt;So how do we get from here to (more) secure? Throwing &lt;code&gt;attr&amp;#95;accessible&lt;/code&gt; on the model to whitelist is the safest, but it can cause a lot of unknown breakage if there aren't tests around the fields, which there probably aren't because why would someone test the fields for accessibility if they are automatically accessible? An interim step is to create a blacklist) using &lt;code&gt;attr&amp;#95;protected&lt;/code&gt; to only protect specified fields, get tests around these protected fields, and then upgrade to &lt;code&gt;attr&amp;#95;accessible&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For our user model, let's protect that admin field:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Class User &amp;lt; ActiveRecord::Base
  attr&amp;#95;protected :admin
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the tests:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;describe User do
  describe &amp;quot;with protected fields&amp;quot; do
    context &amp;quot;including admin&amp;quot; do
      let&amp;#40;:user&amp;#41; { Factory.build&amp;#40;:user, :admin =&amp;gt; false&amp;#41; }

      it &amp;quot;cannot mass-update&amp;quot; do
        user.update&amp;#95;attributes&amp;#40;{ :admin =&amp;gt; true }&amp;#41;
        user.admin.should be&amp;#95;false
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We instantiate a user object with admin set to false, try to update that field, and ensure that it did not get updated. If we use &lt;code&gt;user.update&amp;#95;attribute&amp;#40;:admin, true&amp;#41;&lt;/code&gt;, the test would fail because that skips all the ActiveRecord protection, so we use &lt;code&gt;user.update&amp;#95;attributes&lt;/code&gt;. Doing this for all the fields we want to protect will eventually get us to the point where we can swap out &lt;code&gt;attr&amp;#95;protected&lt;/code&gt; with the easier to deal with &lt;code&gt;attr&amp;#95;accessible&lt;/code&gt;. Since we need to be explicit with &lt;code&gt;attr&amp;#95;protected&lt;/code&gt;, it can get to be difficult to maintain quickly since we need to remember to add each new field we want to protect to the list and test it.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Class User &amp;lt; ActiveRecord::Base
  # attr&amp;#95;protected :id, :admin, :awesomeness&amp;#95;rating, :money
  attr&amp;#95;accessible :email, :first&amp;#95;name, :last&amp;#95;name
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's better. Tests and iterative development to the rescue!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 22 Oct 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-10-07-our-interview-process.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-10-07-our-interview-process.html.html
</link>
<title>
Our Interview Process
</title>
<description>
&lt;p&gt;At Crowdcast, we're currently hiring developers, and through much practice we have come up with an interview process that maximizes our chances of finding a candidate who will be a good fit.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;our&amp;#95;hiring&amp;#95;process&quot;&gt;&lt;/a&gt;Our Hiring Process&lt;/h2&gt;&lt;p&gt;There are a few steps that aren't always in the same order, and we may even skip some depending on the candidate.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;phone&amp;#95;screen&quot;&gt;&lt;/a&gt;The phone screen&lt;/h2&gt;&lt;p&gt;I'm not involved in this first step. The engineering manager will talk to a candidate initially to find out if there are any immediate red flags and to clarify his experience. If nothing strange happens (believe me, there have been strange happenings), we'll schedule the candidate to come in or give him a preliminary coding test.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;rails&amp;#95;test&quot;&gt;&lt;/a&gt;The rails test&lt;/h2&gt;&lt;p&gt;We send the client a small Rails coding project that should only take a few hours. We'd like him to create a Rails application with some basic functionality and minimal markup and styling (design is a bonus but not a requirement), put the project on his Github account, and send us a url to the code. This is a &lt;a href='http://blog.codinghorror.com/why-cant-programmers-program/'&gt;Fizzbuzz&lt;/a&gt;-style question for the Rails framework, and it also implies that he has a Github account. You do &lt;a href='https://github.com/dbolson'&gt;have one&lt;/a&gt;, right? If the candidate can already show us Rails code, we may skip this step and just bring him in to the office.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;onsite&amp;#95;interview&quot;&gt;&lt;/a&gt;The onsite interview&lt;/h2&gt;&lt;p&gt;We then bring the candidate in for a few interview rounds. I'll ask a candidate about previous experience and what he enjoys working on to establish a little history and familiarity and to decode what's written on his resume. I'll next go through a technical screening about Ruby, some basic questions and some slightly-less basic questions, and I'll let the candidate explain as much or little as he'd like. A good one will definitely have a lot of say for some of the answers, and a short reply is usually an indication of minimal experience with the subject matter.&lt;/p&gt;&lt;p&gt;Next, we'll get into some Rails-specific questions, both methods and techniques. It's certainly not necessary to know everything about the framework, especially given its development speed, but there are some core ideas that get used often that he should be familiar with. If the candidate can teach me something, that makes me very happy.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;pair&amp;#95;programming&amp;#95;exercise&amp;#95;part&amp;#95;i&quot;&gt;&lt;/a&gt;The pair programming exercise part I&lt;/h2&gt;&lt;p&gt;A new wrinkle we've introduced. Since I'll be &lt;a href='https://en.wikipedia.org/wiki/Pair&amp;#95;programming'&gt;pair programming&lt;/a&gt; with someone, I'd like to know how he thinks and how we'll work together. We'll sit at one computer and, with the candidate driving, work through a small Ruby problem. We'll do &lt;a href='https://en.wikipedia.org/wiki/Test-driven&amp;#95;development'&gt;TDD&lt;/a&gt; (we use &lt;a href='https://www.relishapp.com/rspec'&gt;Rspec&lt;/a&gt; but that's not a requirement). The problem should take 20 – 40 minutes and leaves a lot of room to delve into interesting design issues and refactorings. This is the fun part.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;pair&amp;#95;programming&amp;#95;exercise&amp;#95;part&amp;#95;ii&quot;&gt;&lt;/a&gt;The pair programming exercise part II&lt;/h2&gt;&lt;p&gt;The last step is to invite the candidate back to pair program on real code for a few hours. We need to make sure we're a fit for each other, and this gives him an opportunity to engage our code base and be part of the team. This is not just for me but for everyone in the office, and of course the candidate, to assess the interactions.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;post&amp;#95;mortem&quot;&gt;&lt;/a&gt;Post mortem&lt;/h2&gt;&lt;p&gt;Does any interview process find the perfect candidate? Not that I've discovered. We can't go as in-depth as &lt;a href='https://gist.github.com/obie/652092'&gt;Hashrocket&lt;/a&gt;, but we can get partially there with the multiple pairing exercises and full team interaction. It's so incredibly important to get along with coworkers since we spend as much time at work as sleeping (actually, it's probably more time at work), so just having the technical chops is not enough. We hope that our process gives us the knowledge to make the right decisions for everyone involved.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 07 Oct 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-09-27-emailing-with-delayed-job.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-09-27-emailing-with-delayed-job.html.html
</link>
<title>
Emailing with Delayed Job
</title>
<description>
&lt;p&gt;We used &lt;a href='https://github.com/tobi/delayed&amp;#95;job'&gt;Delayed Job&lt;/a&gt; to queue emails sent out to users, both to offload that blocking process and for scheduling. It has worked well so far, but recently there were some strange bugs popping up. Some emails were stuck in the queue, and the error message was about bad YAML syntax.&lt;/p&gt;&lt;p&gt;Delayed Job serialized objects in its handler field, and, with some user input that's not encoded properly, created incorrect YAML. For example, this could happen:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;id: 1
  foo: 'here is some 'text'
  bar: 'something else'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice the odd number of single quotes in &lt;code&gt;foo&lt;/code&gt;? Yeah, that's bad. Since we already had that kind of data saved, we needed another way to fix this.&lt;/p&gt;&lt;p&gt;Instead of having methods in the notifier.rb file like so:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def forgot&amp;#95;password&amp;#40;user&amp;#41;
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We did it like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def forgot&amp;#95;password&amp;#40;user&amp;#95;id&amp;#41;
  user = User.find&amp;#40;user&amp;#95;id&amp;#41;
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delayed Job serialized just the user id and not the entire user object, so any potentially harmful data wasn't saved. This was more expensive since the objects had to get instantiated again, but sending out email wasn't expensive for our app, so this solution worked well.&lt;/p&gt;&lt;p&gt;If you ever get strange YAML syntax errors from delayed job, perhaps this method will work for you.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 27 Sep 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-09-15-testing-controller-json-responses-in-rspec.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-09-15-testing-controller-json-responses-in-rspec.html.html
</link>
<title>
Testing controller JSON responses in Rspec
</title>
<description>
&lt;p&gt;I was recently rewriting some controller specs because they were way too heavy: all the models were saved to the database and there was no mocking. While trying to test the JSON response of an action, I got the following exception:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;ActiveSupport::JSON::Encoding::CircularReferenceError
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the relevant controller code:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;format.json do
  render :json =&amp;gt; as&amp;#95;json&amp;#40;@questions&amp;#41;
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the test's mock:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;question = mock&amp;#95;model&amp;#40;Question&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A little cryptic, right? After a little digging, I changed the mock to this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;question = mock&amp;#95;model&amp;#40;Question, :as&amp;#95;json =&amp;gt; {'foo' =&amp;gt; 'bar'}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ah, there we go!&lt;/p&gt;&lt;p&gt;The spec ended up looking like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;context &amp;quot;as json&amp;quot; do
  it &amp;quot;lists the questions&amp;quot; do
    question = mock&amp;#95;model&amp;#40;Question, :as&amp;#95;json =&amp;gt; {'foo' =&amp;gt; 'bar'}&amp;#41;
    Question.should&amp;#95;receive&amp;#40;:find&amp;#95;ordered&amp;#95;subjects&amp;#41;.and&amp;#95;return&amp;#40;&amp;#91;question&amp;#93;&amp;#41;
    get :index, :format =&amp;gt; 'json'
    response.body.should == &amp;quot;&amp;#91;{\&amp;quot;foo\&amp;quot;:\&amp;quot;bar\&amp;quot;}&amp;#93;&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In our &lt;code&gt;application&amp;#95;controller.rb&lt;/code&gt;, an &lt;code&gt;as&amp;#95;json&lt;/code&gt; method called &lt;code&gt;to&amp;#95;json&lt;/code&gt;, which would call &lt;code&gt;as&amp;#95;json&lt;/code&gt; in the test, resulting in a circular reference. Oops.&lt;/p&gt;&lt;p&gt;Don't forget to stub &lt;code&gt;as&amp;#95;json&lt;/code&gt;!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 15 Sep 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-09-12-attaching-events-to-a-disabled-submit-button.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-09-12-attaching-events-to-a-disabled-submit-button.html.html
</link>
<title>
Attaching Events to a Disabled Submit Button
</title>
<description>
&lt;p&gt;There was a form that had a few required fields, and I wanted to show a message when the user hovered over the submit button when not every field was completed. The problem was that the submit button was disabled until the fields are filled in, and I couldn't attach an event to a disabled form element.&lt;/p&gt;&lt;p&gt;One solution is to add an invisible element over the button.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;var $disabledSubmit = $&amp;#40;'#submit&amp;#95;wrapper input:disabled'&amp;#41;;
var $disabledSubmitParent = $&amp;#40;'#submit&amp;#95;wrapper'&amp;#41;;
var $overlay = $&amp;#40;'&amp;lt;div /&amp;gt;'&amp;#41;;
$overlay.css&amp;#40;{
  position: 'absolute',
  top: $disabledSubmit.position&amp;#40;&amp;#41;.top,
  left: $disabledSubmit.position&amp;#40;&amp;#41;.left,
  width: $disabledSubmit.outerWidth&amp;#40;&amp;#41;,
  height: $disabledSubmit.outerHeight&amp;#40;&amp;#41;,
  zIndex: 10,
  opacity: 0
}&amp;#41;;
$overlay.mouseover&amp;#40;this.submitHoverOver&amp;#41;;
$overlay.mouseout&amp;#40;this.submitHoverOut&amp;#41;;
$disabledSubmitParent.append&amp;#40;$overlay&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This created an overlay over the button that handled the hiding and showing (&lt;code&gt;submitHoverOver&amp;#40;&amp;#41;&lt;/code&gt;/&lt;code&gt;submitHoverOut&amp;#40;&amp;#41;&lt;/code&gt;) of the message.&lt;/p&gt;&lt;p&gt;When the form was ready to submit and the button was enabled, we needed to do two things. The first was to lower the z-index of the overlay so the user can access the button.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$overlay.css&amp;#40;'z-index', -1&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second was to unbind the events on the overlay so we didn't continue to show the message.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$overlay.unbind&amp;#40;&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the user changed the data to be in a bad state, we disabled the submit button. We also needed to reattach the events and crank up the z-index of the overlay.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$overlay.css&amp;#40;'z-index', 10&amp;#41;;
$overlay.mouseover&amp;#40;this.submitHoverOver&amp;#41;;
$overlay.mouseover&amp;#40;this.submitHoverOut&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, instead of putting up an error message or more text about required fields, the user would be directed to finish the form if he hadn't done so when he tried to submit.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 12 Sep 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-09-06-my-name-is-danny-and-i-make-mistakes.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-09-06-my-name-is-danny-and-i-make-mistakes.html.html
</link>
<title>
My name is Danny...and I make mistakes
</title>
<description>
&lt;p&gt;Yes, it's true. Here's what I did, and here's the reaction.&lt;/p&gt;&lt;p&gt;At work a few weeks ago, I was going through some callback code that sets some meta data on a model's associations. I noticed that a related flag wasn't getting set as well, that it was only set in one other specific instance with the meta data. Hmm…let's fix that, shall we? Flag added, moving on.&lt;/p&gt;&lt;p&gt;Star wipe to this week.&lt;/p&gt;&lt;p&gt;We found a bug when displaying historical data, and I quickly realized that the display was wrong because it was skipping over objects it shouldn't, objects that were flagged when they shouldn't be. Cue pants pooping.&lt;/p&gt;&lt;p&gt;There was a fix, and I would just need to run a script that would update the flag for all the associated models affected after the callback happens and ignore the other ones because those were the ones that explicitly have the flag set at the other, correct, time. But should I tell anyone or do I just run the script and say that I fixed the display bug? Well, WWJD (what would Jack Nicholson do)? He'd tell everyone, damn it, because he's like that. Keeping it real. Not like Chuck Norris.&lt;/p&gt;&lt;p&gt;Anyway, I sent out an email admitting what happened, and I included a high-level explanation of what happened along with a technical one. I explained that there is a fix and we won't lose any data, and that it would fix the current display bug but that we need to do some tests to make sure it didn't affect any other parts of the application.&lt;/p&gt;&lt;p&gt;My manager's response? &quot;Hey, man, shit happens. Glad you fixed it.&quot; That's why I like working here.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 06 Sep 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-07-13-adding-field-separation-for-list-data.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-07-13-adding-field-separation-for-list-data.html.html
</link>
<title>
Adding Field Separation for List Data
</title>
<description>
&lt;p&gt;&lt;a href='https://github.com/dbolson/metaldetectr'&gt;MetalDetectr&lt;/a&gt; is effectively a list of data as specific as a user wishes to see. It will show only a list of releases a user has in his &lt;a href='http://www.last.fm/'&gt;last.fm&lt;/a&gt; library to a list of everything on &lt;a href='http://www.metal-archives.com/'&gt;metal-archives.com&lt;/a&gt;. A big concern is presenting it properly, and one method is to delineate releases by whatever sort method a user wants to see. This can be by release date, by the band's name, by the release's name, or by the release's format (eg, EP, full-length, DVD).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;algorithm&quot;&gt;&lt;/a&gt;The algorithm&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Start with a table row showing the earliest or most recent, depending on sort order, of theselected sort column.&lt;/li&gt;&lt;li&gt;Loop through the releases.&lt;/li&gt;&lt;li&gt;If the current release's relevant field is greater/less than the preceding one, show anothertable row with the current release's field value.&lt;/li&gt;&lt;li&gt;Show the release.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For example, the default sort is by US release date starting at the earliest date (and the current month so there's less noise). The list will display the current month and every album released during that month. When a release is next month, it will show next month and then all releases from that month. Continue on through the rest of the releases. If the user wants to see the list in descending order, it will show the last month first and work its way to the most current month.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;code&quot;&gt;&lt;/a&gt;The code&lt;/h2&gt;&lt;p&gt;First find the first value and display it in a full column span table row:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# views/releases/index,html.haml
- comparison&amp;#95;value = @releases.first.chain&amp;#95;methods&amp;#40;Release::FIELDS&amp;#95;WITH&amp;#95;METHODS&amp;#91;Release.default&amp;#95;sort&amp;#40;params&amp;#91;:s&amp;#93;&amp;#41;&amp;#93;&amp;#41;
= separator&amp;#95;row&amp;#40;comparison&amp;#95;value&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These two lines use the following methods:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# models/release.rb
# Sets the sort order to what's passed or us&amp;#95;date.
def self.default&amp;#95;sort&amp;#40;sort&amp;#41;
  sort || 'us&amp;#95;date'
end

# models/release.rb
# Takes an array of symbols and calls them on the release instance if it
# responds to them.
# Example: release.chain&amp;#95;methods&amp;#40;&amp;#91;:us&amp;#95;date, :month&amp;#93;&amp;#41; =&amp;gt; release.us&amp;#95;date.month
def chain&amp;#95;methods&amp;#40;methods&amp;#41;
  methods.inject&amp;#40;nil&amp;#41; do |memo, acc|
    target = memo ? memo : self
    target.respond&amp;#95;to?&amp;#40;acc&amp;#41; ? target.send&amp;#40;acc&amp;#41; : memo
  end
end

# helpers/releases&amp;#95;helper.rb
# Creates a row with a full colspan for the value.
def separator&amp;#95;row&amp;#40;value&amp;#41;
  value = Date::MONTHNAMES&amp;#91;value&amp;#93; if value.is&amp;#95;a?&amp;#40;Fixnum&amp;#41;
  content&amp;#95;tag&amp;#40;:tr, :class =&amp;gt; cycle&amp;#40;'even', 'odd'&amp;#41;&amp;#41; do
    content&amp;#95;tag&amp;#40;:td, value, :class =&amp;gt; 'separator&amp;#95;row', :colspan =&amp;gt; 7&amp;#41;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;FIELDS&amp;#95;WITH&amp;#95;METHODS&lt;/code&gt; is a constant that contains a mapping of field names and methods to call on them to display properly:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# models/release.rb
FIELDS&amp;#95;WITH&amp;#95;METHODS = {
  'band' =&amp;gt; &amp;#91;:band, :first, :downcase&amp;#93;,
  'name' =&amp;gt; &amp;#91;:name, :first, :downcase&amp;#93;,
  'us&amp;#95;date' =&amp;gt; &amp;#91;:us&amp;#95;date, :month&amp;#93;,
  'euro&amp;#95;date' =&amp;gt; &amp;#91;:euro&amp;#95;date, :month&amp;#93;,
  'format' =&amp;gt; &amp;#91;:format&amp;#93;,
  nil =&amp;gt; &amp;#91;:us&amp;#95;date, :month&amp;#93;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we loop through each release, updating the comparison value when we get to the next one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# views/releases/index,html.haml
- @releases.each do |release|
  - current&amp;#95;value = release.chain&amp;#95;methods&amp;#40;Release::FIELDS&amp;#95;WITH&amp;#95;METHODS&amp;#91;Release.default&amp;#95;sort&amp;#40;params&amp;#91;:s&amp;#93;&amp;#41;&amp;#93;&amp;#41;
  - if Release.values&amp;#95;compared?&amp;#40;current&amp;#95;value, comparison&amp;#95;value, params&amp;#91;:d&amp;#93;&amp;#41;
    - comparison&amp;#95;value = current&amp;#95;value
    = separator&amp;#95;row&amp;#40;comparison&amp;#95;value&amp;#41;
  - else
    - comparison&amp;#95;value = current&amp;#95;value
  = render release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compare the two values based on the sort order:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# models/release.rb
# Sets the comparison operator to be greater than if the direction is nil or ascending,
# or less than if the direction is descending.
def self.comparison&amp;#95;operator&amp;#40;direction&amp;#41;
  &amp;#40;direction.nil? || direction == 'asc'&amp;#41; ? :&amp;gt; : :&amp;lt;
end

# models/release.rb
# True if both value and comparison exist and
# if the direction is ascending:
#   true if value &amp;gt; comparison, false otherwise
# if the direction is descending:
#   true if value &amp;lt; comparison, false otherwise
def self.values&amp;#95;compared?&amp;#40;value, comparison, direction&amp;#41;
  value &amp;amp;&amp;amp;
  comparison &amp;amp;&amp;amp;
  value.send&amp;#40;
    Release.comparison&amp;#95;operator&amp;#40;direction&amp;#41;,
    comparison
  &amp;#41;
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We tried to abstract the comparisons and what's displayed so we can add new fields and only need to update the field-method mapping. There is always the possibility that a field is nil, since we don't always get all the possible data for every release, so &lt;code&gt;chain&amp;#95;methods&lt;/code&gt; will call all the methods it can on a release instance until it finishes or returns nil. We could have chained a bunch of &lt;code&gt;try&lt;/code&gt;s together, but that didn't look right.&lt;/p&gt;&lt;p&gt;We also tried to get as much code out of the view as we could, and it can be improved, but it's okay for now.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 13 Jul 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-07-08-namespacing-lib-files-and-rspec.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-07-08-namespacing-lib-files-and-rspec.html.html
</link>
<title>
Namespacing lib files and RSpec
</title>
<description>
&lt;p&gt;I've been in an ongoing battle with RSpec to get it to properly load files in the &lt;code&gt;/lib&lt;/code&gt; directory of a rails app. There's a class &lt;code&gt;MetalArchivesFetcher&lt;/code&gt; wrapped in a MetalDetectr module as a namespace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;module MetalDetectr
  class MetalArchivesFetcher
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The spec file starts like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'spec&amp;#95;helper'
require 'metal&amp;#95;archives&amp;#95;fetcher'

describe MetalDetectr::MetalArchivesFetcher do
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Without the require, I would receive the message&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;load&amp;#95;missing&amp;#95;constant': Expected /Users/danny/code/metaldetectr/lib/metal&amp;#95;archives&amp;#95;fetcher.rb to define MetalArchivesFetcher &amp;#40;LoadError&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It felt a little off to need to require the file again because Rails already loads it in with&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# config/application.rb
config.autoload&amp;#95;paths += Dir&amp;#91;&amp;quot;#{config.root}/lib/&amp;#42;&amp;#42;/&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I could put the require in &lt;code&gt;spec&amp;#95;helper.rb&lt;/code&gt;, but it still felt strange.&lt;/p&gt;&lt;p&gt;I decided to remove the module namespace. That lets me remove the require line and all preceding &lt;code&gt;MetalDetectr::&lt;/code&gt; for every MetalArchivesFetcher call in the spec. Is this the right decision? It's definitely &lt;a href='https://en.wikipedia.org/wiki/Don%27t&amp;#95;repeat&amp;#95;yourself'&gt;DRYer&lt;/a&gt;, but I do create tighter coupling. Jim Weirich's talk, &lt;a href='http://mattgrande.com/2009/05/11/jim-weirich-on-connascence/'&gt;&quot;The Building Blocks of Modularity&quot;&lt;/a&gt; (that I can't find online) does go over the trade-offs of writing code that is either more tightly or loosely coupled, and my takeaway from that is, since this file is already coupled to the application and models within it, why add an additional layer? It's more of a perceived loosening while only adding a bit more complexity. And that's usually not a good thing.&lt;/p&gt;&lt;p&gt;Perhaps I'll add it back in later, but for now, &lt;a href='https://en.wikipedia.org/wiki/You&amp;#95;aren%27t&amp;#95;gonna&amp;#95;need&amp;#95;it'&gt;I'm not going to need it&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 08 Jul 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-06-26-a-real-life-github-success-story.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-06-26-a-real-life-github-success-story.html.html
</link>
<title>
A Real Life GitHub Success Story
</title>
<description>
&lt;p&gt;&lt;a href='https://github.com/'&gt;GitHub&lt;/a&gt; has been a real treasure for developers, and I've used it both at work and for &lt;a href='https://github.com/dbolson'&gt;personal projects&lt;/a&gt;. Until now, I haven't used it to its full effect, that is, contributing.&lt;/p&gt;&lt;p&gt;For &lt;a href='/blog/2011/05/introducing-metaldetectr'&gt;MetalDetectr&lt;/a&gt;, I wanted to allow a user to filter the list to see releases from artists he had in his &lt;a href='http://www.last.fm/'&gt;last.fm&lt;/a&gt; library. A quick search led me to &lt;a href='https://github.com/youpy/ruby-lastfm'&gt;this gem&lt;/a&gt;, only it wasn't as fully-featured as I needed.&lt;/p&gt;&lt;p&gt;So I forked it.&lt;/p&gt;&lt;p&gt;Github made this really easy to do. Soon I had the repository in my account, cloned it locally, checked out a new branch, and I was working.&lt;/p&gt;&lt;p&gt;The code was clean and certainly made my life easier to get what I wanted. There was a &lt;code&gt;/method&amp;#95;categories&lt;/code&gt; folder that contained the methods to do API calls to get or create information for artists, tracks, and users. I wanted to read in a user's library of artists, so I simply modeled this after the other files.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Lastfm
  module MethodCategory
    class Library &amp;lt; Base
      regular&amp;#95;method :get&amp;#95;artists, &amp;#91;:user&amp;#93;, &amp;#91;&amp;#91;:limit, nil&amp;#93;, &amp;#91;:page, nil&amp;#93;&amp;#93; do |response|
        response.xml&amp;#91;'artists'&amp;#93;&amp;#91;'artist'&amp;#93;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This created a get request call for a last.fm user, set an optional limit on the number of fetched results, and set an optional page number to scan to. Along with the API key, these fields are outlined in the &lt;a href='http://www.last.fm/api/show/library.getArtists'&gt;last.fm api docs&lt;/a&gt;. Testing worked similarly. A spec file contained the other method tests, so adding the following, plus a fixture of the xml response, was super easy.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;describe '#library' do
  it 'should return an instance of Lastfm::Library' do
    @lastfm.library.should be&amp;#95;an&amp;#95;instance&amp;#95;of&amp;#40;Lastfm::MethodCategory::Library&amp;#41;
  end

  describe '#get&amp;#95;artists' do
    it 'should get the artists\' info' do
      @lastfm.should&amp;#95;receive&amp;#40;:request&amp;#41;.with&amp;#40;'library.getArtists', {
        :user =&amp;gt; 'test',
        :limit =&amp;gt; nil,
        :page =&amp;gt; nil
      }&amp;#41;.and&amp;#95;return&amp;#40;make&amp;#95;response&amp;#40;'library&amp;#95;get&amp;#95;artists'&amp;#41;&amp;#41;
      artists = @lastfm.library.get&amp;#95;artists&amp;#40;'test'&amp;#41;
      artists&amp;#91;1&amp;#93;&amp;#91;'name'&amp;#93;.should eql&amp;#40;'Dark Castle'&amp;#41;
      artists.size.should == 2
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After adding these methods, I pushed the branch to my github repository and sent a pull request to the original repository. Again, github makes this trivially easy. Before it was accepted, I had this line in the Metaldetectr Gemfile:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;gem 'lastfm', :git =&amp;gt; 'git://github.com/dbolson/ruby-lastfm.git', :branch =&amp;gt; 'library&amp;#95;get&amp;#95;artists'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the pull request accepted and my code merged into the master branch, it looked like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;gem 'lastfm'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's all it took to contribute to open source software.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 26 Jun 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-06-11-metal-archives-json-results-parsing.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-06-11-metal-archives-json-results-parsing.html.html
</link>
<title>
Metal Archives' JSON Results Parsing
</title>
<description>
&lt;p&gt;Some further explanation of how to get Metal Archives' JSON data from a &lt;a href='/blog/2011/05/23/scraping-a-site-when-it-changes-its-design'&gt;recent post&lt;/a&gt; is necessary. Through reading the markup and trial and error, I found the URL to receive the data I needed.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://www.metal-archives.com/search/ajax-advanced/searching/albums \
/?&amp;amp;releaseYearFrom=2011&amp;amp;releaseMonthFrom=1&amp;amp;releaseYearTo=2011 \
&amp;amp;releaseMonthTo=12&amp;amp;&amp;#95;=1&amp;amp;sEcho=0&amp;amp;iColumns=4&amp;amp;sColumns=&amp;amp;iDisplayStart=1&amp;amp; \
iDisplayLength=100&amp;amp;sNames=%2C%2C%2C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This returns a result set that looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{
 &amp;quot;error&amp;quot;: &amp;quot;&amp;quot;,
 &amp;quot;iTotalRecords&amp;quot;: 3637,
 &amp;quot;iTotalDisplayRecords&amp;quot;: 3637,
 &amp;quot;sEcho&amp;quot;: 0,
 &amp;quot;aaData&amp;quot;: &amp;#91;
   &amp;#91;
    &amp;quot;&amp;lt;a href=\&amp;quot;http://www.metal-archives.com/bands/037/3540277845\&amp;quot; title=\&amp;quot;037 &amp;#40;ES&amp;#41;\&amp;quot;&amp;gt;037&amp;lt;/a&amp;gt;&amp;quot;,
    &amp;quot;&amp;lt;a href=\&amp;quot;http://www.metal-archives.com/albums/037/Los&amp;#95;Fuertes&amp;#95;Sobreviven/307703\&amp;quot;&amp;gt;Los Fuertes Sobreviven&amp;lt;/a&amp;gt;&amp;quot;,
    &amp;quot;Full-length&amp;quot;,
    &amp;quot;May 24th, 2011 &amp;lt;!-- 2011-05-24 --&amp;gt;&amp;quot;
  &amp;#93;,
  &amp;#91;
    &amp;quot;&amp;lt;a href=\&amp;quot;http://www.metal-archives.com/bands/037/3540277845\&amp;quot; title=\&amp;quot;037 &amp;#40;ES&amp;#41;\&amp;quot;&amp;gt;037&amp;lt;/a&amp;gt;&amp;quot;,
    &amp;quot;&amp;lt;a href=\&amp;quot;http://www.metal-archives.com/albums/037/Tantas&amp;#95;Vidas/306172\&amp;quot;&amp;gt;Tantas Vidas&amp;lt;/a&amp;gt;&amp;quot;,
    &amp;quot;Single&amp;quot;,
    &amp;quot;May 6th, 2011 &amp;lt;!-- 2011-05-06 --&amp;gt;&amp;quot;
  &amp;#93;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You'll notice the &lt;code&gt;iTotalRecords&lt;/code&gt; field which conveniently provides the total amount to releases available. You'll also notice the the &lt;code&gt;iDisplayStart&lt;/code&gt; parameter in the URL that lets us step through the results 100 at a time. By looping through &lt;code&gt;&amp;#40;iTotalRecords / 100 + 1&amp;#41;&lt;/code&gt; times, incrementing &lt;code&gt;iDispalyStart&lt;/code&gt; by &lt;code&gt;i &amp;#42; 100&lt;/code&gt;, we can get a result set for all the records very quickly.&lt;/p&gt;&lt;p&gt;Now that we have the results, we just need a little regular expression magic to pull out all the information.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;BAND&amp;#95;NAME&amp;#95;AND&amp;#95;COUNTRY&amp;#95;REGEXP = /&amp;#40;.+&amp;#41;\s{1}\&amp;#40;&amp;#40;&amp;#91;a-zA-Z&amp;#93;{2}&amp;#41;\&amp;#41;/
ALBUM&amp;#95;URL&amp;#95;AND&amp;#95;NAME&amp;#95;REGEXP = /&amp;quot;&amp;#40;.+&amp;#41;&amp;quot;&amp;gt;&amp;#40;.+&amp;#41;&amp;lt;\/a&amp;gt;/
RELEASE&amp;#95;DATE&amp;#95;REGEXP = /&amp;lt;!--\s&amp;#40;.{10}&amp;#41;\s--&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There was a strange situation where an album didn't have a band page but displayed a message that the band didn't exist, so there is one last regular expression used to guard against a slightly alternative format for the data:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;NO&amp;#95;BAND&amp;#95;REGEXP = /span.+&amp;lt;\/span/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The data are much easier to gather and never time out now, so I was able to get rid of all the intermediate saving steps such as after gathering the paginated links and saving the last release searched when the site times out. I'll probably have to add it back in to get the record label of the release since you'll notice it's absent in the JSON but it is available on the release's page.&lt;/p&gt;&lt;p&gt;The code to save the albums now looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;agent = ::MetalArchives::Agent.new
agent.paginated&amp;#95;albums.each&amp;#95;with&amp;#95;index do |album&amp;#95;page, index|
  album&amp;#95;page.each do |album|
    if album&amp;#91;0&amp;#93;.match&amp;#40;::MetalArchives::Agent::NO&amp;#95;BAND&amp;#95;REGEXP&amp;#41;.nil?
      Release.create&amp;#40;
        :name =&amp;gt; agent.album&amp;#95;name&amp;#40;album&amp;#41;,
        :band =&amp;gt; agent.band&amp;#95;name&amp;#40;album&amp;#41;,
        :format =&amp;gt; agent.release&amp;#95;type&amp;#40;album&amp;#41;,
        :url =&amp;gt; agent.album&amp;#95;url&amp;#40;album&amp;#41;,
        :country =&amp;gt; agent.country&amp;#40;album&amp;#41;,
        :us&amp;#95;date =&amp;gt; agent.release&amp;#95;date&amp;#40;album&amp;#41;
      &amp;#41;
    end
    CompletedStep.find&amp;#95;or&amp;#95;create&amp;#95;by&amp;#95;step&amp;#40;CompletedStep::ReleasesCollected&amp;#41;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Quick and simple.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 11 Jun 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-05-31-histograms-in-ruby-with-seer.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-05-31-histograms-in-ruby-with-seer.html.html
</link>
<title>
Histograms in Ruby With Seer
</title>
<description>
&lt;p&gt;Google has a robust set of charts through their &lt;a href='https://developers.google.com/chart/'&gt;visualization API&lt;/a&gt; that they use for Analytics, so when I needed a solution to graph a histogram, I turned to a Ruby implementation of Google Charts.&lt;/p&gt;&lt;p&gt;There are &lt;a href='https://www.ruby-toolbox.com/categories/graphing.html'&gt;other options&lt;/a&gt;, but most have little activity. The &lt;a href='https://github.com/CoralineAda/seer'&gt;Seer&lt;/a&gt; gem seems to provide enough power to get the data I need, providing a decent set of configuration options and a lot of simplicity.&lt;/p&gt;&lt;p&gt;To get started, add this bit of JavaScript to the head of the page:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;Seer::init&amp;#95;visualization
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the view (preferably a view helper), add this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;begin
  Seer::visualize&amp;#40;
    question.data&amp;#95;points,
    :as =&amp;gt; :column&amp;#95;chart,
    :in&amp;#95;element =&amp;gt; 'histogram',
    :series =&amp;gt; {
      :series&amp;#95;label =&amp;gt; 'label',
      :data&amp;#95;method =&amp;gt; 'percentage'
    },
    :chart&amp;#95;options =&amp;gt; {
      :max =&amp;gt; 100,
      :min =&amp;gt; 0,
      :height =&amp;gt; 355,
      :width =&amp;gt; 488,
      :is&amp;#95;3&amp;#95;d =&amp;gt; false,
      :legend =&amp;gt; 'none',
      :colors =&amp;gt; &amp;quot;&amp;#91;{color:'#990000', darker:'#660000'}&amp;#93;&amp;quot;,
      :title =&amp;gt; 'Best Estimates',
      :title&amp;#95;x =&amp;gt; 'Numbers',
      :title&amp;#95;y =&amp;gt; 'Percent'
    }&amp;#41;
rescue ArgumentError =&amp;gt; e
  show&amp;#95;no&amp;#95;data&amp;#95;message&amp;#95;for&amp;#95;histogram
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, we provide a &lt;code&gt;Struct&lt;/code&gt; (&lt;code&gt;question.data&amp;#95;points&lt;/code&gt;, which I'll get to later) to the column chart (as per Google's API) to render in a div with a histogram id. The &lt;code&gt;series&amp;#95;label&lt;/code&gt; and &lt;code&gt;data&amp;#95;method&lt;/code&gt; names are important, as they are the two methods the &lt;code&gt;Struct&lt;/code&gt; responds to and provide the x- and y-axis data respectively. There are a fair amount of options to play with. Notice that visualize will raise an exception if there is no data instead of just rendering a blank chart, so we need to catch that and display something else. I put a message to tell the user as much:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def show&amp;#95;no&amp;#95;data&amp;#95;message&amp;#95;for&amp;#95;histogram
  content&amp;#95;tag&amp;#40;:div&amp;#41;,
    content&amp;#95;tag&amp;#40;:h1, 'There is not enough data to display the Crowd Belief chart'&amp;#41;,
    :id =&amp;gt; 'empty&amp;#95;histogram&amp;#95;text'
  &amp;#41;
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The interesting part is packaging up the data into the &lt;code&gt;Struct&lt;/code&gt;. Bear in mind that this code is not totally clean and refactored, but the test coverage will make it a lot easier to do so later.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class DataPointsContainer
  class DataPoint &amp;lt; Struct.new&amp;#40;:label, :percentage&amp;#41;; end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's all we need to get the Seer visualization working, so now we can provide &lt;code&gt;DataPoint&lt;/code&gt; with some data points. As background, a &lt;code&gt;Question&lt;/code&gt; has a numerical answer, and we want to get a set of data points where each point is a range of equal size containing the answers. We will show up to 11 points, depending on the size of the range (not the amount of data) so the graph doesn't look too bare or too cluttered. One last fun wrinkle is dealing with outlier data. We decided we don't want to show those data points as separate pieces of data but absorb them into the first and last points of the chart. To calculate the range without the outliers, we first calculate the mean and the standard deviation, and we return two lists: one with the outliers (those above or below 1.96 standard deviations from the mean or ~5% and 95%).&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def outliers&amp;#95;and&amp;#95;kept&amp;#95;answers&amp;#40;all&amp;#95;answers&amp;#41;
  mean = mean&amp;#40;all&amp;#95;answers&amp;#41;
  stddev = stddev&amp;#40;all&amp;#95;answers, mean&amp;#41;

  all&amp;#95;answers.partition do |i|
    i &amp;gt; high&amp;#95;threshold&amp;#40;all&amp;#95;answers, mean, stddev&amp;#41; ||
    i &amp;lt; low&amp;#95;threshold&amp;#40;all&amp;#95;answers, mean, stddev&amp;#41;
  end
end

def low&amp;#95;threshold&amp;#40;numbers, mean, stddev&amp;#41;
  mean - &amp;#40;stddev &amp;#42; STDDEV&amp;#95;FACTOR&amp;#41;.round
end

def high&amp;#95;threshold&amp;#40;numbers, mean, stddev&amp;#41;
  mean + &amp;#40;stddev &amp;#42; STDDEV&amp;#95;FACTOR&amp;#41;.round
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can find the smallest and largest points of the new range of data without worrying about the outliers messing up everything. We start with the first data point as the lowest in the range and add the width of each range to get the highest point:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;low&amp;#95;point = answers.minimum
high&amp;#95;point = low&amp;#95;point + range&amp;#95;width&amp;#40;answers.minimum, answers.maximum, amount&amp;#95;of&amp;#95;points&amp;#41;

def range&amp;#95;width&amp;#40;min, max, points&amp;#95;size&amp;#41;
  width = &amp;#40;&amp;#40;max - min&amp;#41;.to&amp;#95;f / points&amp;#95;size.to&amp;#95;f&amp;#41;
  width = 1.0 if width &amp;lt; 1.0 &amp;amp;&amp;amp; @question.precision.to&amp;#95;i == 0
  width
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For each data point (up to 11), we create a &lt;code&gt;DataPoint&lt;/code&gt;, set the low to the current high, and find the new high by adding the width range to the current low (which is the old high). If we're on the last data point, use the last number in the range instead. When creating the &lt;code&gt;DataPoint&lt;/code&gt;, we calculate the percentage by doing a SQL count of all answers within the range and grouping by the value:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;answers.count&amp;#40;
  :conditions =&amp;gt; 'value &amp;gt;= #{low} AND value &amp;lt; #{high}&amp;quot;,
  :order =&amp;gt; 'value ASC',
  :group =&amp;gt; 'value'
&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, we add the additional outliers to either the first or last &lt;code&gt;DataPoint&lt;/code&gt;, if the outliers exist:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;if index == 0
  additional = outliers.count { |x| x &amp;lt; low }
end

if index == total&amp;#95;points&amp;#95;count - 1
  additional = outliers.count { |x| x &amp;gt; high }
end

amount += additional
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only thing left to do is to give the Question model access to the data points in its class:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def data&amp;#95;points
  DataPointsContainer.new&amp;#40;self&amp;#41;.data&amp;#95;points
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A downside to this gem is that there is &lt;a href='https://www.ruby-forum.com/topic/996227'&gt;not&lt;/a&gt; a &lt;a href='https://groups.google.com/forum/?fromgroups#!topic/rubyonrails-talk/5ULCgyWU7Xk'&gt;lot&lt;/a&gt; of &lt;a href='http://stackoverflow.com/questions/4624601/seer-gem-usage-showing-errors'&gt;discussion&lt;/a&gt; about it, but I found that is also true for other solutions. Google does provide more options than the gem currently offers, but I haven't had a need for these yet, and I can fork and add the functionality later if needed. The only frustration so far is on Google's part, because there are some options (removing the pop up bubbles or editing their contents) that aren't available.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 31 May 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-05-23-scraping-a-site-when-it-changes-its-design.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-05-23-scraping-a-site-when-it-changes-its-design.html.html
</link>
<title>
Scraping a Site When It Changes Its Design
</title>
<description>
&lt;p&gt;&lt;a href='/blog/2011/05/14/introducing-metaldetectr/'&gt;MetalDetectr&lt;/a&gt; has hit a snag. The site I'm scraping for all the release information, &lt;a href='http://www.metal-archives.com/'&gt;metal-archives.com&lt;/a&gt; recently changed their entire user interface, rendering the current functionality of my screen scraping gem useless. What shall I do?&lt;/p&gt;&lt;p&gt;I started looking into their new UI, and they use &lt;a href='http://www.datatables.net/'&gt;jQuery Datatables plugin&lt;/a&gt; to display the list of albums through ajax calls. A little Firebug and I can read the JSON that the plugin uses to populate the tables.&lt;/p&gt;&lt;p&gt;Now that I can access all the data, I will just need to rewrite the metal-archives gem to grab json for every paginated list of a result set, and I have all the information again! Check back for updates to the application.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 23 May 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-05-14-introducing-metaldetectr.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-05-14-introducing-metaldetectr.html.html
</link>
<title>
Introducing MetalDetectr
</title>
<description>
&lt;p&gt;It came from a &lt;a href='http://www.invisibleoranges.com/2010/07/upcoming-metal-releases-july-2010/'&gt;blog post&lt;/a&gt;. In July 2010, Cosmo Lee, creator of the metal blog &lt;a href='http://www.invisibleoranges.com/'&gt;Invisible Oranges&lt;/a&gt; requested &quot;a simple list&quot; of upcoming releases from &lt;a href='http://metal-archives.com/'&gt;metal-archives.com&lt;/a&gt;. I thought that this would be the perfect opportunity to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create something of value for a community I belong to&lt;/li&gt;&lt;li&gt;Help someone I genuinely appreciated for his hard work within the same community&lt;/li&gt;&lt;li&gt;Create a Rails 3 application and use some new technologies&lt;/li&gt;&lt;li&gt;Show off a little code on Github&lt;/li&gt;&lt;li&gt;Have fun!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Thus, Metaldetectr. This application will search metal-archives.com, the canonical site for all things metal, for upcoming releases and create a list with basic information for each release. The method is to programmatically search through the current year, returning a paginated list of results. By accessing each page of this list, we generate another list of possible releases. Going through that list and only choosing those releases that are in the future, we come up with the final list as requested. However, there are a few interesting problems that arose through the development process.&lt;/p&gt;&lt;p&gt;The first is that metal-archives.com times out. A lot. Each step in the above process needs to be able to save the spot it is on when the site is no longer accessible. If we're searching through the paginated list of results and it fails, we need to note which page we're on and continue from there the next time. The same with the links to each album.&lt;/p&gt;&lt;p&gt;Another problem is that metal-archives.com has human input, so there are human errors. Not every album has a specified release date, some only a month, some albums are in different languages that aren't easy to parse, and some have crazy titles or band names and can be almost impossible to automatically figure out exactly what each one of those is supposed to be. There will always need to be a manual step to clean up some data, but the main functionality is there.&lt;/p&gt;&lt;p&gt;To get better data, we pass each album through Amazon's US site and a few European sites (.uk, .de, and .fr currently) to check if the release date is different. Since Amazon actually provides the albums instead of just listing them, their release dates take highest priority.&lt;/p&gt;&lt;p&gt;I hope this ends up providing some value to the metal community. I constantly read about the desire for a one-stop list of upcoming releases, and I would like MetalDetectr to be that list.&lt;/p&gt;&lt;p&gt;You can look at the code yourself on &lt;a href='https://github.com/dbolson/metal-archives'&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 14 May 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-05-10-messing-with-magic-encoding.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-05-10-messing-with-magic-encoding.html.html
</link>
<title>
Messing With Magic Encoding
</title>
<description>
&lt;p&gt;There's some irony in how difficult Ruby can be with different character sets considering it was written by someone who doesn't speak English natively. I don't want to get political here, so I'm just going to mention some encoding strangeness.&lt;/p&gt;&lt;p&gt;Ruby 1.9 is much improved over Ruby 1.8, but I don't know that &lt;a href='http://stackoverflow.com/questions/3291017/how-can-i-avoid-putting-the-magic-encoding-comment-on-top-of-every-utf-8-file-in'&gt;defaulting to US-ASCII encoding&lt;/a&gt; is a good one. I suppose so, if one wishes to be more explicit with some sort of default. This became an issue when I wrote a screen-scraping library that read a site with foreign (to me) characters. With the default encoding, the program would stop on those characters, returning early without reading the entire word. It took a long time to track down because the site I was scrapping would time-out a lot, so I assumed that that was the issue. But when it would seemingly time-out on the same pages each time, I had to look into the problem more.&lt;/p&gt;&lt;p&gt;After finding the problem, I needed a solution. &lt;a href='http://blog.grayproductions.net/articles/ruby&amp;#95;19s&amp;#95;three&amp;#95;default&amp;#95;encodings'&gt;This post&lt;/a&gt; gave me the direction to fix it, so I was able to check the following for a result:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;page = Mechanize.new&amp;#40;'/url'&amp;#41;
page.encoding = 'iso-8859-1'
page.search&amp;#40;...&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setting the encoding to iso-8859-1 let me get the foreign characters I needed. In the tests, I put the following magic comment at the top of the file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# encoding: utf-8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I can test with an HTML fixture containing foreign characters. Crazy stuff, but it works.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 10 May 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-05-02-i-am-become-genius.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-05-02-i-am-become-genius.html.html
</link>
<title>
I Am Become Genius
</title>
<description>
&lt;p&gt;As follow-up to my &lt;a href='/blog/2011/04/26/book-review-pragmatic-thinking-and-learning-refactor-your-wetware/'&gt;previous post&lt;/a&gt;, I would like to share &lt;a href='http://jamesthornton.com/blog/how-to-get-to-genius'&gt;an article&lt;/a&gt; that's made the rounds on the internet recently. &quot;How to get to Genius,&quot; an excellent synthesis of key ideas for success, correlates with themes from Pragmatic Thinking and Learning.&lt;/p&gt;&lt;p&gt;The working definition for &quot;genius&quot; is &quot;the extreme form of insight...in terms of perspective,&quot; or similarly, the intuition an expert has gained from many years of deliberate study (&lt;a href='http://gladwell.com/outliers/'&gt;Malcolm Gladwell's 10,000 hour rule&lt;/a&gt;). A genius has internalized a system so much that he is effectively part of that system. A genius/expert's perspective separates the novice because the latter does not understand either the rules of the system or the broad implications of why the system exists. It's the “ability to notice these vague connections amongst all the noise, amongst all the internal chatter going on inside your head, [that] separates the insightful from the unaware, the unobservant.&quot;&lt;/p&gt;&lt;p&gt;With evidence from neuroscience about brain plasticity, and using the computer/brain metaphor from Pragmatic Thinking, each read is a write, meaning that the act of remembering changes the memories of the brain and that constantly recalling information will write this information more permanently to memory, we bring together the necessity of much deliberate practice and seeing patterns within a system. The long hours thinking and practicing something will ingrain what's learned deeply in the mind, creating greater understanding and recall of the rules. This in turn grants the ability to understand more of what we study, and thus we can gain a broader perspective. With these tools, it becomes possible to see something different than if we were to only focus our attention on small details. Thus, becoming a genius, while certainly not easy, is, conceptually, simple and, more importantly, &lt;strong&gt;possible&lt;/strong&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 02 May 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-04-26-book-review-pragmatic-thinking-and-learning-refactor-your-wetware.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-04-26-book-review-pragmatic-thinking-and-learning-refactor-your-wetware.html.html
</link>
<title>
Book Review - Pragmatic Thinking and Learning: Refactor Your Wetware
</title>
<description>
&lt;p&gt;The &lt;a href='http://pragprog.com/'&gt;Pragmatic Programmers&lt;/a&gt; have consistently put out good material for years, and whether &lt;a href='http://pragprog.com/book/tpp/the-pragmatic-programmer'&gt;their own&lt;/a&gt; or &lt;a href='http://pragprog.com/book/achbd/the-rspec-book'&gt;other authors'&lt;/a&gt;, the quality is almost always high. I just finished &lt;a href='http://pragprog.com/book/ahptl/pragmatic-thinking-and-learning'&gt;&amp;#42;Pragmatic Thinking and Learning&amp;#42;&lt;/a&gt; and, reading &lt;a href='http://www.duffbert.com/duffbert/blog.nsf/d6plinks/TADF-7KYLN5'&gt;numerous&lt;/a&gt; other reviews, they are all very positive. The community liked it, and that's usually a good sign (we'll see what happens when not everyone is &lt;a href='http://www.rubyinside.com/rails-3-1-adopts-coffeescript-jquery-sass-and-controversy-4669.html'&gt;happy&lt;/a&gt;).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;important&amp;#95;relationships&quot;&gt;&lt;/a&gt;Important relationships&lt;/h2&gt;&lt;p&gt;The first major concept introduced, and repeatedly referenced, is that the relationships between objects are more interesting than the objects themselves. Discrete &quot;things&quot; -- whether facts, concepts, or people, exist not in a vacuum but with other similar and different &quot;things.&quot; Emergent behaviors and ideas spring up with the interactions between everything in their specific system. These specific contexts generate yet more powerful versions of the what is interacting in them.&lt;/p&gt;&lt;p&gt;A non-programming example is opening a locked door. The situation of why one wants to open the door matters in how one will attempt to open the door. Whether there is a baby in a burning house with a locked front door or there are documents we want to steal in a hotel room under security will influence the method used -- an axe or lock picking tools. The why strongly influences the how and context matters.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;got&amp;#95;skills?&quot;&gt;&lt;/a&gt;Got skills?&lt;/h2&gt;&lt;p&gt;We then turn to the &lt;a href='http://en.wikipedia.org/wiki/Dreyfus&amp;#95;model&amp;#95;of&amp;#95;skill&amp;#95;acquisition'&gt;Dreyfus Model for Skill Acquisition&lt;/a&gt; and see how people learn new topics. Starting as a novice, one who needs context-free rules, like recipes, because he doesn't know enough to establish any big picture of the problem domain, and ending as an expert who understands the system he works in so well he works by intuition and pattern matching, there is a trend from stricter rules to practically none. The greater the expertise, the more we understand what is possible and what we should consider, both giving us faster access to what is possible and a smaller, and more easily understood, problem.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;impr-you-vement&quot;&gt;&lt;/a&gt;Impr-you-vement&lt;/h2&gt;&lt;p&gt;The methods for improving skills is simple but not easy. Only through deliberate practice can we get to the highest levels of understanding, and this involves a lot of well-structured, hard work. We need a system to work on well-defined tasks that are appropriately challenging, continuous feedback from those tasks to keep us working on relevant ideas, and lots of repetition to strengthen the ideas and make them part of our long-term memories.&lt;/p&gt;&lt;p&gt;It also helps to find the relationships between what we're learning, looking at the big picture to understand the overall meaning and not be bothered with the minute details (at least not at the beginning). Analogies to previous knowledge further create relationships and help establish the context of the new ideas. For example, when reading a non-fiction book, we should first scan the table of contents and chapter summaries to get an overview of what we're going to read to establish the most ideas to focus on. While reading we should summarize the concepts, create metaphors with the material, and, when finished, expand the notes with a reread and discuss the ideas with colleagues. These tactics will cement the knowledge in the brain better than just a cursory skimming of the book.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;nothing&amp;#95;is&amp;#95;perfect,&amp;#95;however&quot;&gt;&lt;/a&gt;Nothing is perfect, however&lt;/h2&gt;&lt;p&gt;One weakness of the book is the reliance on the left/right brain dichotomy, an idea that &lt;a href='http://prostheticknowledge.tumblr.com/post/3563608775/fuckyeah-neuroscience-left-brain-vs-right-brain-and'&gt;isn't totally backed by science&lt;/a&gt;. This criticism goes as deep as one wants to rely on the truth of this assertion, but if we think of it as a metaphor, like the main brain metaphor of a computer (&lt;a href='http://dangerousintersection.org/2006/05/18/the-brain-is-not-a-computer/'&gt;another incomplete metaphor&lt;/a&gt;), and always remember that it's just a method to point in the general direction of understanding, and that we shouldn't understand these concepts to be almost literally accurate, we can get away with the comparisons. Regardless, I'm sure there is value in the takeaways such as creating analogies between disparate topics, drawing out ideas, talking out loud, and using other mixed media.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;so&amp;#95;what?&quot;&gt;&lt;/a&gt;So what?&lt;/h2&gt;&lt;p&gt;Pragmatic Learning is an excellent book, faults and all, and I did take away some concrete plans.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I've created a &lt;a href='http://danielchoi.com/software/soywiki.html'&gt;wiki&lt;/a&gt; for knowledge dumps and connecting ideas&lt;/li&gt;&lt;li&gt;I'm researching mind mapping software (either &lt;a href='http://freemind.sourceforge.net/wiki/index.php/Main&amp;#95;Page'&gt;this one&lt;/a&gt; or &lt;a href='http://www.mindmeister.com/'&gt;this one&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;I'm writing down my ideas in a notebook, along with notes on books I'm reading, which I then transfer to an online medium&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are dozens of other specific tasks to do, and I plan to come back to the book and implement more as needed. It's certainly not necessary to try every single one, but it is reasonable, if the motivation is there (and who wouldn't want to learn how to learn better?), the results will follow.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 26 Apr 2011 00:00:00 -0700
</pubDate>
</item>
<item>
<guid>
http://dbolson.github.io/posts/2011-04-06-composite-pattern-ftw.html.html
</guid>
<link>
http://dbolson.github.io/posts/2011-04-06-composite-pattern-ftw.html.html
</link>
<title>
Composite Pattern FTW
</title>
<description>
&lt;p&gt;A &lt;a href='http://www.paulgraham.com/taste.html'&gt;post&lt;/a&gt; by Paul Graham I recently found resonated with what I've been doing at work recently. In his post, &quot;Taste for Makers,&quot; PG posits that beauty is not wholly subjective and that good design is beautiful. Among others, good design:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;is simple&lt;/li&gt;&lt;li&gt;solves the right problem&lt;/li&gt;&lt;li&gt;is suggestive&lt;/li&gt;&lt;li&gt;looks easy&lt;/li&gt;&lt;li&gt;uses symmetry&lt;/li&gt;&lt;li&gt;is redesign&lt;/li&gt;&lt;li&gt;can copy&lt;/li&gt;&lt;li&gt;is often quite strange&lt;/li&gt;&lt;li&gt;happens in chunks&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'd like to focus on a few of these descriptions and use an example I've recently done.&lt;/p&gt;&lt;p&gt;In his fantastic book, &lt;em&gt;&lt;a href='http://www.designpatternsinruby.com/'&gt;Design Patterns in Ruby&lt;/a&gt;&lt;/em&gt;, &lt;a href='http://blog.russolsen.com/'&gt;Russ Olsen&lt;/a&gt; describes one tenant of the &lt;a href='http://c2.com/cgi/wiki?GangOfFour'&gt;GOF&lt;/a&gt; book to “prefer composition over inheritance.” Inheritance creates tighter coupling between classes, since the children of the base class need to know about the internals of the base, even though the coupling is very specific to the implementation and (should be) well understood. &lt;a href='http://en.wikipedia.org/wiki/Composite&amp;#95;pattern'&gt;Composition&lt;/a&gt;, however, changes the relationship between objects. An object no longer is another type of object but has the functionality of another object (&lt;a href='http://en.wikipedia.org/wiki/Has-a'&gt;is-a vs. has-a&lt;/a&gt;). This relationship increases the encapsulation of the composite object by providing an interface to the composed object instead of exposing the underlying details of a base class.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;slices&amp;#95;&lt;em&gt;and&lt;/em&gt;&amp;#95;dices!&quot;&gt;&lt;/a&gt;Slices &lt;em&gt;and&lt;/em&gt; Dices!&lt;/h2&gt;&lt;p&gt;Now I know there is a tendency to think of design patterns as a &lt;a href='http://en.wikipedia.org/wiki/No&amp;#95;Silver&amp;#95;Bullet'&gt;silver bullet&lt;/a&gt;, but bear with me. The situation is fine when the inheritance tree is simple and the functionality basic. The complexity grows as the tree grows and as more functionality is required. Soon, you're not quite sure if it should inherit &lt;code&gt;Foo&lt;/code&gt; which inherits from &lt;code&gt;Bar&lt;/code&gt;, or if you should just inherit from Baz way up near the base. You'll have to dig into the classes to find out which one is closest to what you want and hope it makes the most sense to place the new class wherever you end up placing it. However, using the Composite Pattern gives us much more flexibility for creating new classes and giving them abilities.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;an&amp;#95;example&quot;&gt;&lt;/a&gt;An Example&lt;/h2&gt;&lt;p&gt;There is a system that asks users different types of questions. One type asks when an event will happen (&lt;code&gt;DateQuestion&lt;/code&gt;), one type asks the numerical results of an event (&lt;code&gt;NumberQuestion&lt;/code&gt;), and one asks which event will happen given a set of choices (&lt;code&gt;ChoiceQuestion&lt;/code&gt;). We have a base &lt;code&gt;Question&lt;/code&gt; that each inherits from, and since dates can be represented as numbers, &lt;code&gt;DateQuestion&lt;/code&gt; will inherit from &lt;code&gt;NumberQuestion&lt;/code&gt;. These questions allow answers, comments, access control lists, and have a specific work flow (create, activate, suspend, close, etc.).&lt;/p&gt;&lt;p&gt;Later on, the system needs to support a few more types of questions: a numeric range (&lt;code&gt;NumberRangeQuestion&lt;/code&gt;), a date range (&lt;code&gt;DateRangeQuestion&lt;/code&gt;), a yes/no-only (&lt;code&gt;YesNoQuestion&lt;/code&gt;)... you get the point. We need to figure out where these new types go in the inheritance tree – whether one is a child of a &lt;code&gt;DateQuestion&lt;/code&gt; (itself a child of &lt;code&gt;NumberQuestion&lt;/code&gt;), or if it's just a child of &lt;code&gt;NumberQuestion&lt;/code&gt;, or maybe it's its own type and only inherits from the base &lt;code&gt;Question&lt;/code&gt; type. We start to bump into complexity issues, that is, unnecessary complexity.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;i'll&amp;#95;take&amp;#95;a&amp;#95;little&amp;#95;of&amp;#95;this...&quot;&gt;&lt;/a&gt;I'll Take a Little of This...&lt;/h2&gt;&lt;p&gt;Let's approach this problem from a different angle. Given our original &lt;code&gt;Question&lt;/code&gt; types, we can make them all inherit from a base &lt;code&gt;Question&lt;/code&gt; class and then give them abilities as needed. So now our classes look like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Question
  include Commentable
  include AccessListControllable
  include Workflowable
end

class NumberQuestion &amp;lt; Question
  include Numerical
end

class DateQuestion &amp;lt; Question
  include Numerical
  include Dateable
end

class ChoiceQuestion &amp;lt; Question
  include Choiceable
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;NumberQuestion&lt;/code&gt; and &lt;code&gt;DateQuestion&lt;/code&gt; are numerical, that is, they have whatever functionality they need to do what numerical objects need to do. The &lt;code&gt;DateQuestion&lt;/code&gt; is also dateable, so it has additional properties needed for a dateable object, while &lt;code&gt;NumberQuestion&lt;/code&gt;, not needing them, doesn't have those abilities. So when we need additional &lt;code&gt;Question&lt;/code&gt; types, we can choose which abilities they need. A &lt;code&gt;DateRangeQuestion&lt;/code&gt;? It's dateable, numerical, and it's got its own class-specific functionality as well.&lt;/p&gt;&lt;p&gt;There are some trade-offs. Some modules may not have all the functionality an object needs, and there is a potential for similar code needed to provide slightly different abilities. There can also be unneeded functionality in a module that an object will never need. These problems aren't specific to the Composite design pattern, as they can occur with regular inheritance as well.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;some&amp;#95;clarity&quot;&gt;&lt;/a&gt;Some Clarity&lt;/h2&gt;&lt;p&gt;We've refactored our code to use a design pattern to organize our code a little better to make our application more maintainable and extendable, both good things, and the process was relatively painless. Since the functionality never changed, just the organization, if the &lt;a href='http://smartic.us/2008/08/15/tatft-i-feel-a-revolution-coming-on/'&gt;tests&lt;/a&gt; pass, we can feel confident that our models still work how we want.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 06 Apr 2011 00:00:00 -0700
</pubDate>
</item>
</channel>
</rss>
